#include <bits/stdc++.h>
#define pii pair<int,int>
#define pb emplace_back
#define ll long long
#define mk make_pair
#define se second
#define fi first
//#define mid ((l+r)>>1)
//#define rs now<<1|1
//#define ls now<<1
using namespace std;
bool Mst;
const int Max=1e7+10;
const int mod=998244353;
const int inf=1e9+10;

inline int read(){
   int res=0,v=1;
   char c=getchar();
   while(c<'0'||c>'9'){v=(c=='-'?-1:1);c=getchar();}
   while(c>='0'&&c<='9'){res=(res<<3)+(res<<1)+(c^48);c=getchar();}
   return res*v;
}

template <int mod>
struct modint{

    int val;

    static int norm(const int &x){return x<0?x+mod:x;}
    static int Norm(const int &x){return x>=mod?x%mod:x;}

    modint inv()const{
        int a=val,b=mod,u=1,v=0,t;
        while(b>0)t=a/b,swap(a-=t*b,b),swap(u-=t*v,v);
        return modint(u);
    }


    modint():val(0){}
    modint(const int &m):val(norm(m)){}
    modint(const long long &m):val(norm(m%mod)){}
    modint operator -()const{return modint(norm(-val));}
    bool operator ==(const modint &x){return val==x.val;}
    bool operator !=(const modint &x){return val!=x.val;}
    bool operator <=(const modint &x){return val<=x.val;}
    bool operator >=(const modint &x){return val>=x.val;}
    bool operator >(const modint &x){return val>x.val;}
    bool operator <(const modint &x){return val<x.val;}
    modint& operator *=(const modint &x){return val=static_cast<int>(1ll*val*x.val%mod),*this;}
    modint& operator <<=(const modint &x){return val=(1ll*val<<x.val)%mod,*this;}
    modint& operator +=(const modint &x){return val=Norm(1ll*val+x.val),*this;}
    modint& operator -=(const modint &x){return val=norm(1ll*val-x.val),*this;}
    modint& operator >>=(const modint &x){return val>>=x.val,*this;}
    modint& operator ^=(const modint &x){return val^=x.val,*this;}
    modint operator >>(const modint &x){return modint(*this)>>=x;}
    modint operator <<(const modint &x){return modint(*this)<<=x;}
    modint& operator /=(const modint &x){return *this*=x.inv();}
    modint operator +(const modint &x){return modint(*this)+=x;}
    modint operator -(const modint &x){return modint(*this)-=x;}
    modint operator *(const modint &x){return modint(*this)*=x;}
    modint operator /(const modint &x){return modint(*this)/=x;}
    modint operator ^(const modint &x){return modint(*this)^=x;}
    friend std::ostream& operator<<(std::ostream& os,const modint &a){return os<<a.val;}
    friend std::istream& operator>>(std::istream& is,modint &a){return is>>a.val;}
};
typedef modint<998244353>m98;


template <int mod>
struct Math{
    typedef modint<mod>Modint;
    Modint frac[Max],inv[Max];
    Math(){
        int n=Max-1;frac[0]=inv[0]=1;for(int i=1;i<=n;++i)frac[i]=frac[i-1]*i;
        inv[n]=frac[n].inv();for(int i=n-1;i>=1;--i)inv[i]=inv[i+1]*(i+1);
    }
    Modint C(int n,int m){return(n<m||m<0||n<0)?0:frac[n]*inv[m]*inv[n-m];}
    Modint A(int n,int m){return(n<m||m<0||n<0)?0:frac[n]*inv[n-m];}
};
typedef Math<998244353>M98;

m98 ksm(m98 a,int b){
    m98 ans=1;
    for(;b;b>>=1){
        if(b&1)ans=ans*a;
        a=a*a;
    }
    return ans;
}

m98 f[Max],g[Max],F[Max],G[Max];
M98 P;

bool Med;
signed main(){
    int n,a,b;n=read();a=read();b=read();g[0]=G[0]=1;
    int t=min(a,min(b,min(n-a+1,n-b+1)));
    for(int i=1;i<=n;++i){
        if(i==n)f[i]=P.C(n-1,a-1); 
        else if(i<t)f[i]=0;
        else{
            if(n-a+1<=i)f[i]+=P.C(i-1,n-a);
            if(i>=a)f[i]+=P.C(i-1,a-1);
        } 
        g[i]=g[i-1]*(i==n?1:2)-f[i];
    }
    for(int i=1;i<=n;++i){
        if(i==n)F[i]=P.C(n-1,b-1);
        else if(i<t)F[i]=0;
        else {
            if(n-b+1<=i)F[i]+=P.C(i-1,n-b);
            if(i>=b)F[i]+=P.C(i-1,b-1);
        }
        G[i]=(G[i-1]*(i==n?1:2))-F[i];
    }
    int q=read();
    for(int i=1;i<=q;++i){
        int x;cin>>x;
        x=n-x+1;
        if(x<t){cout << "0\n";continue;}
        if(x==n){cout << f[x]*F[x] << "\n";}
        else{
            cout << (f[x]*G[x]+F[x]*g[x]+F[x]*f[x])*ksm(4,n-x-1) << "\n";
        }
    }

    cerr<< "Time: "<<clock()/1000.0 << "s\n";
    cerr<< "Memory: " << (&Mst-&Med)/1000000.0 << "MB\n";
    return 0;
}
/*

*/