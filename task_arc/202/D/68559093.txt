#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 3e5 + 5;
const int mod = 998244353;
int n, m;
int sx, sy, tx, ty;
int k;
int ans[maxn << 2];
int fac[maxn], ifac[maxn];
int qpow(int x, int y){
	int res = 1;
	while(y){
		if(y & 1) res = 1ll * res * x % mod;
		x = 1ll * x * x % mod; y >>= 1;
	}
	return res;
}
const int maxv = 3e5;
const int B = 600;
const int grt = 3;
const int ginv = qpow(grt, mod - 2);
void init(){
	fac[0] = 1;
	for(int i = 1;i <= maxv;i++) fac[i] = 1ll * i * fac[i - 1] % mod;
	ifac[maxv] = qpow(fac[maxv], mod - 2);
	for(int i = maxv - 1;i >= 0;i--) ifac[i] = 1ll * (i + 1) * ifac[i + 1] % mod;
	return ;
}
int cc(int x, int y){
	if(x < 0 || y < 0 || x - y < 0) return 0;
	return 1ll * fac[x] * ifac[y] % mod * ifac[x - y] % mod;
}
void upd(int &x, int y){
	return x = x + y >= mod ? x + y - mod : x + y, void();
}
int rev[maxn << 2];
void initrev(int h){
	rev[0] = 0;
	for(int i = 1;i < (1 << h);i++){
		rev[i] = (rev[i >> 1] >> 1) | ((i & 1) ? (1 << (h - 1)) : 0);
	}
	return ;
}
void dft(int f[], int h, int op){
	int flen = (1 << h);
	for(int i = 0;i < flen;i++){
		if(i < rev[i]) swap(f[i], f[rev[i]]);	
	}
	for(int p = 1;p <= h;p++){
		int plen = (1 << p); int hf = (plen >> 1);
		int gn = qpow((op == 1 ? grt : ginv), (mod - 1) / plen);
		for(int i = 0;i < flen;i += plen){
			int ml = 1;
			for(int j = i;j < i + hf;j++){
				int tmp = (f[j] + mod - 1ll * ml * f[j + hf] % mod) % mod;
				f[j] = (f[j] + 1ll * ml * f[j + hf]) % mod;
				f[j + hf] = tmp; ml = 1ll * gn * ml % mod;
			}
		}
	}
	return ;
}
int f[maxn << 2], tmp[maxn];
int g[maxn << 2];
void solve(int S, int T, int L){
	memset(f, 0, sizeof(f)); memset(g, 0, sizeof(g));
	if(L <= B){
		g[S] = 1; f[0] = g[T];
		for(int i = 1;i <= k;i++){
			for(int j = 1;j <= L;j++){
				tmp[j] = 0;
				if(j - 1 > 0) upd(tmp[j], g[j - 1]);
				if(j + 1 <= L) upd(tmp[j], g[j + 1]);
			}
			for(int j = 0;j <= L;j++) g[j] = tmp[j];
			f[i] = 1ll * ifac[i] * g[T] % mod;
		}
	} else if(L > B){
		for(int i = 0;i <= k;i++){
			if((T + S + i) & 1) continue;
			int pans = cc(i, (T - S + i) / 2); int pL = T, pR = T;
			int pc = 0;
			while(true){
				pc++;
				int tL = - pR; int tR = 2 * L + 2 - pL;
				if(abs(tL - S) > i && abs(tR - S) > i) break;
				if(pc & 1){
					upd(pans, mod - cc(i, (tL - S + i) / 2));
					upd(pans, mod - cc(i, (tR - S + i) / 2));
				} else if(pc % 2 == 0){
					upd(pans, cc(i, (tL - S + i) / 2));
					upd(pans, cc(i, (tR - S + i) / 2));
				}
				pL = tL; pR = tR;
			}
			f[i] = 1ll * ifac[i] * pans % mod;
		}
	}
	memset(g, 0, sizeof(g));
	for(int i = 0;i <= k;i++) g[i] = ifac[i];
	int bt = 0;
	while((1 << bt) <= k + k) bt++;
	initrev(bt); int plen = (1 << bt);
	dft(f, bt, 1); dft(g, bt, 1);
	for(int i = 0;i < plen;i++) f[i] = 1ll * f[i] * g[i] % mod;
	dft(f, bt, -1); int pinv = qpow(plen, mod - 2);
	for(int i = 0;i < plen;i++) f[i] = 1ll * pinv * f[i] % mod;
	// for(int i = 0;i <= k;i++) cerr << 1ll * fac[i] * f[i] % mod << " ";
	// cerr << endl;
	return ;
}
int main(){
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	cin >> n >> m >> k >> sx >> sy >> tx >> ty; init();
	solve(sx, tx, n);
	for(int i = 0;i <= k;i++) ans[i] = 1ll * fac[i] * f[i] % mod;
	solve(sy, ty, m);
	for(int i = 0;i <= k;i++) ans[i] = 1ll * ans[i] * fac[i] % mod * f[i] % mod;
	int pans = 0;
	for(int i = k;i >= 0;i--){
		if((k - i) & 1){
;			upd(pans, mod - 1ll * cc(k, i) * ans[i] % mod);
		} else if((k - i) % 2 == 0){
			upd(pans, 1ll * cc(k, i) * ans[i] % mod);
		}
	}
	cout << pans << endl; return 0;
}