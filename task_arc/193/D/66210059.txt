#include<bits/stdc++.h>
using namespace std;

#define ll long long

vector<int> va,vb;
int dact,dbct;

int main(){
	int tc; scanf("%d",&tc);
	while(tc--){
		va.clear(); vb.clear();
		dact=0,dbct=0;
		int n; scanf("%d",&n);
		for (int i=1;i<=n;i++){
			char c; scanf(" %c",&c);
			if (c=='1'){
				va.push_back(i);
				dact++;
				//if (va.size()>1) da[++dact]=i-va[va.size()-2];
			}
		}
		for (int i=1;i<=n;i++){
			char c; scanf(" %c",&c);
			if (c=='1'){
				vb.push_back(i);
				dbct++;
				//if (vb.size()>1) db[++dbct]=i-vb[vb.size()-2];
			}
		}
		int ans=0x3f3f3f3f;
		bool fdans=false;
		for (int type=0;type<=1;type++){
			int tans=0;
			int ct=1;
			int nsum=0;
			int pc=0;
			bool aldn=true;
			int mns=0;
			if (type==1){
				mns=1; tans++;
			}
			for (int i=1;i<dbct;i++){
				//printf("for%d %d\n",i,tans);
				int e=vb[i]-vb[i-1];
				bool dne=false;
				if (ct>=dact) aldn=false;
				while (ct<dact){
					if (((va[ct]-va[ct-1])-mns)>e){
						int nw=(va[ct]-va[ct-1])-e-mns;
						tans+=nsum/2;
						if (nsum%2==1){
							tans++;
							nw--;
						}
						nsum=0;
						tans+=nw/2;
						if (nw%2==1){
							tans++;
							mns=1;
						}else{
							mns=0;
						}
						ct++; dne=true; pc++;
						break;
					}else if (((va[ct]-va[ct-1])-mns)==e&&nsum%2==0){
						tans+=nsum/2;
						nsum=0;
						ct++; dne=true; pc++;
						mns=0;
						break;
					}
					nsum+=(va[ct]-va[ct-1])-mns;
					ct++;
					mns=0;
					if (ct>=dact){
						aldn=false;
						break;
					}
				}
				if (!dne){
					aldn=false;
					break;
				}
				//printf("for%d %d %d\n",i,tans,ct-1);
			}
			if (!aldn){
				continue;
			}
			fdans=true;
			//printf("%d %d %d %d\n",nsum,mns,type,tans);
			if (ct<dact){
				nsum=0;
				for (int i=ct;i<dact;i++) nsum+=(va[i]-va[i-1]);
				nsum-=mns;
				tans+=(nsum+1)/2;
				if (nsum%2==1) mns=1;
				else mns=0;
				//printf("%d\n",nsum);
			}
			int sc=0;
			if ((nsum%2==1)||(mns==1)) sc++;
			if (type==1) sc--;
			//printf("%d %d %d %d\n",nsum,sc,type,tans);
			tans+=abs((va[va.size()-1]+va[0]+sc)/2-(vb[vb.size()-1]+vb[0])/2);
			//printf("%d %d\n",type,tans);
			ans=min(ans,tans);
		}
		if (!fdans) printf("-1\n");
		else printf("%d\n",ans);
	}
}
//do this