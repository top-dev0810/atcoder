#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define ii pair<int,int>
#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define all(v) v.begin(),v.end()
#define lb lower_bound
#define ub upper_bound
#define mp make_pair
#define ins insert
#define er erase
#define task ""
const int maxn = 3000;
vector<int>adj[maxn+1];
string s[maxn];
int dist[maxn+1][maxn+1];
int pre[maxn+1][maxn+1];
int f[maxn+1][maxn+1];
vector<ii>path;
int n;
int cnt=0;
int x[maxn+1];

void bfs(int i){
    dist[i][i]=1;
    queue<int>q;
    q.push(i);
    while(!q.empty()){
        int u=q.front();
        q.pop();
        for(int v:adj[u]){
            if(dist[i][v]==0) dist[i][v]=dist[i][u]+1,pre[i][v]=u,q.push(v);
        }
    }
}

void bfsTwo(int i){
    x[i]=++cnt;
    queue<int>q;
    q.push(i);
    while(!q.empty()){
        int u=q.front();
        q.pop();
        for(int v=1;v<=n;++v){
            if(f[u][v]==1&&x[v]==0){
                x[v]=cnt;
                q.push(v);
            }
        }
    }
}

void solve(){
    cin >> n;
    for(int i=1;i<n;++i){
        int u,v;
        cin >> u >> v;
        adj[u].pb(v);
        adj[v].pb(u);
    }
    for(int i=0;i<n;++i) cin >> s[i];
    for(int i=1;i<=n;++i) bfs(i);
    for(int i=1;i<=n;++i){
        for(int j=1;j<=n;++j){
            if(s[i-1][j-1]=='1') f[i][j]=1;
        }
    }
    for(int i=1;i<=n;++i) f[i][i]=1;
    for(int i=1;i<=n;++i){
        for(int j=1;j<=n;++j){
            path.pb({i,j});
        }
    }
    sort(all(path),[](ii x,ii y){
         return dist[x.fi][x.se]>dist[y.fi][y.se];
         });
    for(ii p:path){
        int u=p.fi,v=p.se;
        if(dist[u][v]<3) continue;
        if(f[u][v]==0) continue;
        int uN=pre[u][v],vN=pre[v][u];
        f[uN][vN]=1;
    }
    for(int i=1;i<=n;++i){
        if(x[i]==0){
            bfsTwo(i);
        }
    }
    reverse(all(path));
    for(ii p:path){
        int u=p.fi,v=p.se;
        if(f[u][v]==1) continue;
        if(dist[u][v]<3){
            if(x[u]==x[v]) f[u][v]=1;
        }
        else{
            if(x[u]==x[v]) f[u][v]=max(f[u][v],f[pre[u][v]][pre[v][u]]);
        }
    }
    int ans=0;
    for(int i=1;i<=n;++i){
        for(int j=1;j<=n;++j) ans+=f[i][j];
    }
    cout << ans;
    return;
}

int main(){
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
//    freopen(task".inp","r",stdin);
//    freopen(task".out","w",stdout);
    solve();
}
