#include <bits/stdc++.h>
#define int long long
#define ll long long
#define ull unsigned long long
#define i128 __int128
#define ld long double
#define rep(i,n) for(int i=0;i<n;++i)
#define REP(i,x,n) for(int i=x;i<n;++i)
#define forn(i,a,b) for(int i=a;i<=b;++i)
#define per(i,a,b) for(int i=a;i>=b;--i)
#define sz(s) (int)s.size()
#define all(v) v.begin(),v.end()
#define itr_ iterator
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define fr first
#define sc second
#define m_p make_pair
#define debug(x) cout<<#x<<":"<<x<<endl;
#define lowbit(x) (x&(-x))
#define setp setprecision
#define over(x) {cout<<x<<endl;return;}
using namespace std;
const int INF=0x3f3f3f3f;
const ll INFL=1e18;
const ll mod=998244353;
const ld eps=1e-14;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
int qpow(int a,int b,int m=mod,int res=1){
	a%=m;
	while(b>0)res=(b&1)?(res*a%m):(res),a=a*a%m,b>>=1;
	return res;
}
int fac[2000005],inv[2000005];
void init(int n){
	fac[0]=inv[0]=1;
	REP(i,1,n+1)fac[i]=fac[i-1]*i%mod;
	inv[n]=qpow(fac[n],mod-2);
	for(int i=n-1;i>=1;--i)inv[i]=inv[i+1]*(i+1)%mod;
}
int binom(int x,int y){
	return x<y||y<0? 0:fac[x]*inv[y]%mod*inv[x-y]%mod;
}

int inv2=qpow(2,mod-2);
void tc(){
	int a,b,c;
	cin>>a>>b>>c;
	if(a>b) swap(a,b);
	if(c>b+1||c<b) over(0)
	int lim=9*qpow(10,a-1)%mod;
	if(a!=b){
		int jin=((1+lim)*lim%mod*inv2%mod+lim*(qpow(10,a-1)-1)%mod)%mod;
		if(c==b+1) cout<<jin<<endl;
		else{
			int aa=(qpow(10,a)-qpow(10,a-1)+mod)%mod;
			int bb=(qpow(10,b)-qpow(10,b-1)+mod)%mod;
			cout<<(aa*bb%mod-jin+mod)%mod<<endl;
		}
	}
	else{
		int tmp1=9*qpow(10,a-1)%mod;
        int tmp2=9*qpow(10,b-1)%mod;
        int ans=0;
		if(c==b+1) ans=(tmp2*qpow(10,a-1)%mod+(qpow(10,a)-1)%mod*8%mod*qpow(10,a-1)%mod*inv2%mod)%mod;
        else ans=(tmp1*tmp2%mod-(tmp2*qpow(10,a-1)%mod+(qpow(10,a)-1)%mod*8%mod*qpow(10,a-1)%mod*inv2%mod)%mod+mod)%mod;
        cout<<ans<<endl;
	}
}

signed main(){
	ios::sync_with_stdio(0);
	cin.tie(0), cout.tie(0);

	int T=1;
	cin>>T;
	while(T--){
		tc();
	}
	return 0;
}

