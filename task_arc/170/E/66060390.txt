#include<bits/stdc++.h>
#define int long long
using namespace std;
namespace fast_IO {//我向众神祈祷，回应我的只有心跳
#define IOSIZE 100000
	char ibuf[IOSIZE], obuf[IOSIZE], *p1 = ibuf, *p2 = ibuf, *p3 = obuf;
#define getchar() ((p1==p2)and(p2=(p1=ibuf)+fread(ibuf,1,IOSIZE,stdin),p1==p2)?(EOF):(*p1++))
#define putchar(x) ((p3==obuf+IOSIZE)&&(fwrite(obuf,p3-obuf,1,stdout),p3=obuf),*p3++=x)
#define isdigit(ch) (ch>47&&ch<58)
#define isspace(ch) (ch<33)
	template<typename T> inline T read() { T s = 0; int w = 1; char ch; while (ch = getchar(), !isdigit(ch) and (ch != EOF)) if (ch == '-') w = -1; if (ch == EOF) return false; while (isdigit(ch)) s = s * 10 + ch - 48, ch = getchar(); return s * w; }
	template<typename T> inline bool read(T &s) { s = 0; int w = 1; char ch; while (ch = getchar(), !isdigit(ch) and (ch != EOF)) if (ch == '-') w = -1; if (ch == EOF) return false; while (isdigit(ch)) s = s * 10 + ch - 48, ch = getchar(); return s *= w, true; }
	template<typename T> inline void print(T x) { if (x < 0) putchar('-'), x = -x; if (x > 9) print(x / 10); putchar(x % 10 + 48); }
	inline bool read(char &s) { while (s = getchar(), isspace(s)); return true; }
	inline bool read(char *s) { char ch; while (ch = getchar(), isspace(ch)); if (ch == EOF) return false; while (!isspace(ch)) *s++ = ch, ch = getchar(); *s = '\000'; return true; }
	inline void print(char x) { putchar(x); }
	inline void print(char *x) { while (*x) putchar(*x++); }
	inline void print(const char *x) { for (int i = 0; x[i]; i++) putchar(x[i]); }
	inline bool read(std::string& s) { s = ""; char ch; while (ch = getchar(), isspace(ch)); if (ch == EOF) return false; while (!isspace(ch)) s += ch, ch = getchar(); return true; }
	inline void print(std::string x) { for (int i = 0, n = x.size(); i < n; i++) putchar(x[i]); }
	inline bool read(bool &b) { char ch; while(ch=getchar(), isspace(ch)); b=ch^48; return true; }
	inline void print(bool b) { putchar(b+48); }
	template<typename T, typename... T1> inline int read(T& a, T1&... other) { return read(a) + read(other...); }
	template<typename T, typename... T1> inline void print(T a, T1... other) { print(a), print(other...); }
	struct Fast_IO { ~Fast_IO() { fwrite(obuf, p3 - obuf, 1, stdout); } } io;
	template<typename T> Fast_IO& operator >> (Fast_IO &io, T &b) { return read(b), io; }
	template<typename T> Fast_IO& operator << (Fast_IO &io, T b) { return print(b), io; }
#define cout io
#define cin io
#define endl '\n'
} using namespace fast_IO;
const int mod=998244353;
const int inv=828542813;
int n,p;
struct Matrix{
	int a[5][5];
	int* operator [](int i){return a[i];}
	Matrix(){memset(a,0,sizeof(a));}
};
Matrix operator *(Matrix A,Matrix B){
	Matrix res;
	for(int i=1;i<=4;i++){
		for(int j=1;j<=4;j++){
			for(int k=1;k<=4;k++){
				(res[i][j]+=A[i][k]*B[k][j])%=mod;
			}
		}
	}
	return res;
}
Matrix ksm(Matrix A,int y){
	Matrix res;
	res[1][1]=res[2][2]=res[3][3]=res[4][4]=1;
	while(y){
		if(y&1)res=res*A;
		y>>=1;A=A*A;
	}
	return res;
}
void solve(){
	cin>>n>>p;
	p=p*inv%mod;
	Matrix ans,base;
	//(head,tail,1,ans) ------>((head+1)*p+tail*(1-p),(head+1)*(1-p)+tail*p,1,ans+(head+1))
	ans[1][1]=0,ans[1][2]=0,ans[1][3]=1,ans[1][4]=0;
	base[1][1]=p,base[2][1]=1+mod-p,base[3][1]=p;
	base[1][2]=1+mod-p,base[2][2]=p,base[3][2]=1+mod-p;
	base[3][3]=1;
	base[1][4]=1,base[3][4]=1,base[4][4]=1;
	ans=ans*ksm(base,n-1);
	cout<<ans[1][4]<<"\n";
}//显然i只有两种取值(i-1,n-i+1)
//DP[i]表示i从前面过来的概率
//不难发现队列里面只有两个元素
//每次相当插入后面,有P/100的概率交换队首和队尾

signed main(){
	int test;
	cin>>test;
	while(test--)solve();
	return 0;
}