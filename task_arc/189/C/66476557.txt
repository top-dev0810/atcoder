#include <bits/stdc++.h>
#define int long long
using namespace std;
const int MOD = 998244353;
#ifdef int
#define inf 0x3f3f3f3f3f3f3f3f
#else
#define inf 0x3f3f3f3f
#endif
const long long infll = 0x3f3f3f3f3f3f3f3f;
#define pii pair<int, int>
#define mkp(x,y) make_pair(x,y)

#ifndef LOCAL
#define SUBMIT
#endif

#ifdef SUBMIT
#define endl '\n'
//#define cin Fastio ::cin
//#define cout Fastio ::cout
#endif

template<typename T>
void read(vector<T> &vec)
{
    for(auto &x:vec)
    {
        cin>>x;
    }
}

int qpow(int n,int k)
{
    int res=1;
    while(k)
    {
        if(k&1)(res*=n)%=MOD;
        (n*=n)%=MOD;
        k>>=1;
    }
    return res;
}

int LCS(vector<int> vec1, vector<int> vec2)
{
    unordered_map<int, int> pos;
    for (int i = 0; i < vec2.size(); i++) {
        pos[vec2[i]] = i;
    }
    vector<int> seq;
    for (auto x : vec1) {
        if (pos.count(x))
            seq.push_back(pos[x]);
    }
    vector<int> lis;
    for (auto x : seq) {
        auto it = lower_bound(lis.begin(), lis.end(), x);
        if (it == lis.end())
            lis.push_back(x);
        else
            *it = x;
    }
    return lis.size();
}

void work()
{
    int n,x;
    cin>>n>>x;
    x--;
    vector<int>a(n),b(n);
    vector<int>transa(n),transb(n);
    read(a);
    read(b);
    read(transa);
    read(transb);
    for(auto &x:transa)x--;
    for(auto &x:transb)x--;
    vector<int>ra,rb;
    int suma=0,sumb=0;
    for(auto x:a)suma+=x;
    for(auto x:b)sumb+=x;
    int res=a[x];
    for(int now=transa[x];now!=x;now=transa[now])
    {
        res+=a[now];
    }
    if(res!=suma)
    {
        cout<<-1<<endl;
        return ;
    }
    res=b[x];
    for(int now=transb[x];now!=x;now=transb[now])
    {
        res+=b[now];
    }
    if(res!=sumb)
    {
        cout<<-1<<endl;
        return ;
    }
    for(int now=transa[x];now!=x;now=transa[now])
    {
        if(ra.size())ra.push_back(now);
        else if(a[now])ra.push_back(now);
    }
    for(int now=transb[x];now!=x;now=transb[now])
    {
        if(rb.size())rb.push_back(now);
        else if(b[now])rb.push_back(now);
    }
    cout<<ra.size()+rb.size()-LCS(ra,rb)<<endl;
}

signed main()
{
#ifndef cin
#ifdef SUBMIT
    ios::sync_with_stdio(0);
    cin.tie(0);
#endif
#endif
    int t=1;
    // cin>>t;
    while(t--)
    {
        work();
    }
}
/*
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%##**##%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%@@@@@@@@########**%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*###*#%@@@%*#######***+%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+#####**@@*#####**++++++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+++####*+**####**%#++++=#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%#++=*##*+%%#*++++#%*+++++%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%###****##*#****++++*#++++=*%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@%########*#**###############**++==+=*##%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@%%%#***##**#############**#######*++=++***%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@%%%%%%######+*#################**#####*+**+****#%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@%%%%%#*#####*+###################***#####*+*+***+#%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@%%%%%%#*####*##+*##**################***####*+*+*#***###%%%%%%@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@%%%%%%%#*####**###+*%#+*#################***####*++++++******%%%%@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@%%%%%%%#######+##*##**#*##*##################**+##++**=+***+*##%%%%%@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@%%%%%%%########+*%###%###+#@%%%%###%%%%%%#******###++%%+++**++#%%%%%%%@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@%%@@@%###*######+*%%%%#######%@#*+===+******++*#####*=++*+++*%##%%%%%%%%@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@%#**##*%##%##+**#%%%%%%%%%%+++=#%#=+*####**######*++=*####*+#%%%%%%%%%@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@%%%%@##%##%##*#@%%%%#%%%%%**@+=****+*%%%%%*########**++++++#%%%%%%%%%%@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@##%%#%##*#@@#**#*%%%%%@@#+###%*#@%*%%#+*###*****+++**%%%%%%%%%%%%%@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@%@%*%#*#%##*%+===#**@@@@@@@@%%%#*%%*#%%#+=+**+=++**##%%%%%%%%%%%%%%%%%@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@%*###*%%%*+=#%-+++#@@@@@@@@@%##%%*#%%#==+=++++++#%%%%%%%%%%@@@@%%%%@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@%@#*%@%**###*##@#*#%#@@@@@@@@@@@@%*+###+*%#++++++===++*#%%%@@%%%%#%%%@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@%@@@%#*+#*#*###%#%@@@@%@@@@@@#+=+*###*%@@*++#******#%%%@@@%%#%%%%%%@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@%*##%@%*#%%*#%@@@%#%@@%#**+++=++******++++%@@@%%%%%@@%%%#%%%%%%%@@@@%%@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@%%@@@@##@@%%#*#**++++++#%@%*******#*++#%#**@@%%%%%%%%%%%%%%%%@@@@@%@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@%##%##+##**+++++=*#@@%%*+**####*+++*%%@@@%%%%@%%%%%%%%%@@@%%%%@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@%**###%%%***++++==+%#*%%%%@@%#*#**#*###*%@%%%%%@%%%%%%%%@@%%%%@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#+========*#*%@@@@@@@@@#%@@%%%%%*##@%%%%%%%%%%@%%%##%%#%@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%##*++=+%#+==+#*#@%@#++*++++=+++%%@%#%*%%%%%%%%%%@%%###%%%%@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@%%#########+++=+*==+=#++*%#-========---=+%%####%##%%%%%#%###%%##@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@#*******#%%##*+====++*+#=***++====+*#*=====-=*#*+%%#%%%##*#%%%%%#@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@%**##%%%%%%###*#**+++++*+*++##*++===#%*==========+*###%%##*#%%#%%%@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@%*#%@%%#####%#%@%#*++==-====+#%***+=======+===++++%%*%%####%%#%##@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@*@%##%%%@@@%*@@*#+++++===--==*#%%#*+==++=+====+++%##%**#*####**%@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@#%%+%@@@@%%@@%##**=+++====--====*#%%%*+*+**++*++++@#*#********#@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@#%#*#@@@@@%%%%@###++======--+**#++#%%%##%%%##%*##*%**********#@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@%###*#%%%@@%%%%%%%@#**====--=**+*+-+%%%****##**#***********##@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@###**#%%%###%%%%#*##*=+=--*#*#****+@@%+#####**##*****+*#%@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@%###**###%%%#++**##+==-=#%#%%%#*+@@%*###****##*****#@@%@@@@@@@@%@@%@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@%%%##%%#+++++++*##*##*######%@#**#####**#***##%@@@@%@@@@@@%@@@@%%@@%@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@%++++++++=++=+%%%%#%#****###**#########*#%@@@@@@@@%@@@@@@@@%@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#+++++++==*%%%%%%#%%%###########**#%@@@@@@@@@%@%@@%@%#@@%#%%%@%@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#*+++=+#%%##%%%########%##%%%%@@@@@@@@@@@@@%@%@%%@%%@@@@%@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%**@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%@@@%#%@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/