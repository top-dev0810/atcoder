#include <bits/stdc++.h>
using namespace std;

const int N = 3e5 + 8;
int n, m;
int a[N], b[N];

int cnt[N];

bool check(int x)
{
	memset(cnt, 0, sizeof(int) * (n + 2));
	auto nxt = [&](int i)
	{ return (i == n - 1) ? 0 : (i + 1); };
	auto dis = [&](int i, int j)
	{ return (b[i] - a[j] + m) % m; };
	auto ldis = [&](int i, int j)
	{ return ((b[i] - x - 1 + m) % m - a[j] + m) % m; };
	auto mtc = [&](int i, int j)
	{ return dis(i, j) <= x; };
	auto add = [&](int l, int r)
	{
		if(l <= r)
			cnt[l]++, cnt[r + 1]--;
		else
			cnt[l]++, cnt[0]++, cnt[r + 1]--;
	};
	if(a[0] == a[n - 1])
	{
		for(int i = 0; i < n; i++)
			if(!mtc(i, 0))
				return false;
		return true;
	}
	int l = -1, r = -1;
	int mn = m, lmn = m;
	for(int i = 0; i < n; i++)
	{
		if(ldis(0, i) <= lmn)
			l = i, lmn = ldis(0, i);
		if(dis(0, i) <= mn)
			r = i, mn = dis(0, i);
	}
	if(mn > x)
		return false;
	add(nxt(l), r);
	for(int i = 1; i < n; i++)
	{
		while(dis(i, nxt(r)) <= dis(i, r))
			r = nxt(r);
		if(!mtc(i, r))
			return false;
		while(ldis(i, nxt(l)) <= ldis(i, l))
			l = nxt(l);
		add((nxt(l) - i + n) % n, (r - i + n) % n);
	}
	if(cnt[0] == n)
		return true;
	for(int i = 1; i < n; i++)
	{
		cnt[i] += cnt[i - 1];
		if(cnt[i] == n)
			return true;
	}
	return false;
}

void solve()
{
	scanf("%d%d", &n, &m);
	for(int i = 0; i < n; i++)
		scanf("%d", &a[i]), a[i] = (m - a[i]) % m;
	for(int i = 0; i < n; i++)
		scanf("%d", &b[i]);
	sort(a, a + n);
	sort(b, b + n);
	int l = 0, r = m;
	while(l <= r)
	{
		const int mid = (l + r) >> 1;
		if(check(mid))
			r = mid - 1;
		else
			l = mid + 1;
	}
	printf("%d\n", l);
}

int main()
{
	int T;
	scanf("%d", &T);
	while(T--)
		solve();
	return 0;
}