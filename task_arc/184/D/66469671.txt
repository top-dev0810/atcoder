// To the Furthest Dream!
#include <bits/stdc++.h>
using namespace std;
using ll = long long;

constexpr int mod = 998244353, N = 300 + 5;
namespace basic {
  inline int add(int x, int y) {return (x + y >= mod ? x + y - mod : x + y);}
  inline int dec(int x, int y) {return (x - y < 0 ? x - y + mod : x - y);}
  inline void ad(int &x, int y) {x = add(x, y);}
  inline void de(int &x, int y) {x = dec(x, y);}
  inline int neg(int x) {return x ? mod - x : 0;}

  inline int qpow(int a, int b) {
    int r = 1;
    while(b) {
      if(b & 1) r = 1ll * r * a % mod;
      a = 1ll * a * a % mod; b >>= 1;
    }
    return r;
  }
  inline int inv(int x) {return qpow(x, mod - 2);}

  int fac[N], ifac[N];
  inline void fac_init(int n = N - 1) {
    fac[0] = 1;
    for(int i = 1; i <= n; i++)
      fac[i] = 1ll * fac[i - 1] * i % mod;
    ifac[n] = inv(fac[n]);
    for(int i = n - 1; i >= 0; i--)
      ifac[i] = 1ll * ifac[i + 1] * (i + 1) % mod;
  }
  int invx[N];
  inline void inv_init(int n = N - 1) {
    invx[1] = 1;
    for(int i = 2; i <= n; i++)
      invx[i] = 1ll * (mod - mod / i) * invx[mod % i] % mod;
  }
  inline int binom(int n, int m) {
    if(n < m || m < 0) return 0;
    return 1ll * fac[n] * ifac[m] % mod * ifac[n - m] % mod;
  }
}
using namespace basic;

int n;
struct Point {int x, y;} a[N];
int s[N][N];
int f[N];

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr), cout.tie(nullptr);
  
  cin >> n;
  for (int i = 1; i <= n; i++) {
    cin >> a[i].x >> a[i].y;
    s[a[i].x][a[i].y] = 1;
  }
  n++, a[n] = {0, n};
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= n; j++) {
      s[i][j] += s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1];
    }
  }
  auto sum = [&](int XL, int XR, int YL, int YR) {
    if (XL > XR || YL > YR) return 0;
    return s[XR][YR] - s[XR][YL - 1] - s[XL - 1][YR] + s[XL - 1][YL - 1];
  };
  sort(a + 1, a + n + 1, [](Point A, Point B) {return A.x > B.x;});
  a[0] = {n, 0};
  f[0] = 1;
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j <= i - 1; j++) {
      if (a[j].y < a[i].y) {
        bool ok = true;
        for (int k = j + 1; k <= i - 1; k++) {
          if (a[j].y < a[k].y && a[k].y < a[i].y) {
            if (!sum(a[i].x + 1, a[k].x - 1, a[j].y + 1, a[k].y - 1)
             && !sum(a[k].x + 1, a[j].x - 1, a[k].y + 1, a[i].y - 1)) {
              ok = false; break;
            }
          }
        }
        if (ok) ad(f[i], f[j]);
      }
    }
  }
  cout << f[n] << "\n";
}