#include<bits/stdc++.h>
using namespace std;
#define int long long
#define mid ((l+r)>>1)
#define ls(p) (p<<1)
#define rs(p) (p<<1|1)
#define lowbit(i) ((i)&(-i))
#define double long double
const int inf=1e18;
const int mod=998244353;
int fast(int x,int k)
{
	int ret=1;
	while(k)
	{
		if(k&1) ret=ret*x%mod;
		x=x*x%mod;
		k>>=1;
	}
	return ret;
}
void solve()
{
	int n,k;
	cin>>n>>k;
	vector<int> p(n+1),d(n+1),s(n+1);
	vector<int> tr(n+1);
	auto update=[&](int x,int k) -> void
	{
		for(int i=x;i<=n;i+=lowbit(i)) tr[i]+=k;
	};
	auto query=[&](int x) -> int
	{
		int sum=0;
		for(int i=x;i>=1;i-=lowbit(i)) sum+=tr[i];
		return sum;
	};
	int tot=0;
	for(int i=1;i<=n;++i)
	{
		cin>>p[i];
		update(p[i],1);
		tot+=query(n)-query(p[i]);
	}
	// cout<<tot<<"???"<<endl;
	for(int i=1;i<=n;++i) tr[i]=0;
	int tot2=0;
	for(int i=n;i>=1;--i)
	{
		if(i+k<=n)
		{
			int tmp=query(n)-query(p[i+k]);
			tot2-=tmp;
			update(p[i+k],-1);
		}
		update(p[i],1);
		tot2+=query(p[i]-1);
		d[i]=tot2;
		// cout<<d[i]<<endl;
	}
	// cout<<tot<<endl;
	vector<int> fac(n+1);
	fac[0]=1;
	for(int i=1;i<=n;++i) fac[i]=fac[i-1]*i%mod;

	int fm=(n-k+1)*fac[k]%mod;
	// fm=fast(fm,mod-2);
	int fz=0;
	int w=k*(k-1)%mod*fast(4,mod-2)%mod;
	// cout<<tot<<endl;
	for(int i=1;i<=n-k+1;++i)
	{
		// cout<<tot-d[i]<<endl;
		fz=(fz+fac[k]*(tot-d[i]+w)%mod)%mod;
	}
	// cout<<fz<<' '<<fm<<endl;
	cout<<fz*fast(fm,mod-2)%mod<<'\n';
	
}
signed main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	int T=1;
	// cin>>T;
	while(T--) solve();
	return 0;
}