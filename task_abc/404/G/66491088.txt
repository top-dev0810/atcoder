#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define rep(i , st , ed) for(int i = st; i < ed; i++)
#define f first
#define s second
#define all(v) v.begin() , v.end()
#ifndef ONLINE_JUDGE 
#define debug(x) cerr << #x << ": " << x << '\n';
#else
#define debug(x)
#endif
struct DifferentEquations{
    int n;
    vector<ll> dis;
    DifferentEquations(int n): n(n){}
    vector<array<ll,3>> edges;
    void add_constraint(int u, int v , ll w){
        // val[v] - val[u] >= w;
        edges.push_back({u,v,w});
    }

    bool isSolvable(){
        // Check if there's a negative cycle
        dis.assign(n,0);
        for(int i = 0; i < n; ++i){
            for(auto &[u,v,w] : edges){
                if(dis[v] < dis[u] + w){
                    dis[v] = dis[u] + w;
                    if(i == n-1) return false;
                }
            }
        }
        return true;
    }

    void solve(){
        // find longest path for each vertex
        dis.assign(n,0);
        for(int i = 0; i < n; ++i){
            for(auto &[u,v,w] : edges){
                dis[v] = max(dis[v] , dis[u] + w);
            }
        }
    }
    vector<ll> get_solution(){
        solve();
        return dis;
    }
};
int main(){
    ios::sync_with_stdio(0); cin.tie(NULL); cout.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
    #endif

    int n, m; cin >> n >> m;

    DifferentEquations s(n+1);
    for(int i = 1; i <= n; ++i) s.add_constraint(i-1,i,+1);
    for(int i = 0; i < m; ++i){
        int l,r,w; cin >> l >> r >> w;
        s.add_constraint(l-1,r,w);
        s.add_constraint(r,l-1,-w);
    }
    if(!s.isSolvable()){
        cout << "-1";
        return 0;
    }else{
        cout << s.get_solution().back() << '\n';
    }
}