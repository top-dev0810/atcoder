#include <bits/stdc++.h>
using namespace std;
#define rep(i, l, r) for (int i = l; i < (int)(r); i++)

using vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;
using vs = vector<string>;
using vc = vector<char>;
using vvc = vector<vector<char>>;
using ll = long long;
using vl = vector<ll>; using vvl = vector<vl>; using vvvl = vector<vvl>;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

template<typename T>
void v_cout(T &vec) {
    for (auto k : vec) cout << k << ' ';
    cout << endl;
    return;
}

template<typename S>
void vv_cout(S &vec) {
    for (auto v : vec) {
        for (auto k : v) cout << k << ' ';
        cout << endl;
    }
    return;
}
template<typename T>
void chmax(T &a, T b) { a = max(a, b);}
template<typename T>
void chmin(T &a, T b) { a = min(a, b);}
//getlineの使い方： getline(cin, (stringの変数名))
//#pragma GCC optimize("Ofast")
//--------------------------------------------------
//how to use: https://atcoder.github.io/ac-library/production/document_ja/maxflow.html
template <class T> struct simple_queue {
    std::vector<T> payload;
    int pos = 0;
    void reserve(int n) { payload.reserve(n); }
    int size() const { return int(payload.size()) - pos; }
    bool empty() const { return pos == int(payload.size()); }
    void push(const T& t) { payload.push_back(t); }
    T& front() { return payload[pos]; }
    void clear() {
        payload.clear();
        pos = 0;
    }
    void pop() { pos++; }
};
template <class Cap> struct mf_graph {
  public:
    mf_graph() : _n(0) {}
    explicit mf_graph(int n) : _n(n), g(n) {}

    int add_edge(int from, int to, Cap cap) {
        assert(0 <= from && from < _n);
        assert(0 <= to && to < _n);
        assert(0 <= cap);
        //printf("from: %d, to: %d, cap: %d\n", from, to, cap);
        int m = int(pos.size());
        pos.push_back({from, int(g[from].size())});
        int from_id = int(g[from].size());
        int to_id = int(g[to].size());
        if (from == to) to_id++;
        g[from].push_back(_edge{to, to_id, cap});
        g[to].push_back(_edge{from, from_id, 0});
        return m;
    }

    struct edge {
        int from, to;
        Cap cap, flow;
    };

    edge get_edge(int i) {
        int m = int(pos.size());
        assert(0 <= i && i < m);
        auto _e = g[pos[i].first][pos[i].second];
        auto _re = g[_e.to][_e.rev];
        return edge{pos[i].first, _e.to, _e.cap + _re.cap, _re.cap};
    }
    std::vector<edge> edges() {
        int m = int(pos.size());
        std::vector<edge> result;
        for (int i = 0; i < m; i++) {
            result.push_back(get_edge(i));
        }
        return result;
    }
    void change_edge(int i, Cap new_cap, Cap new_flow) {
        int m = int(pos.size());
        assert(0 <= i && i < m);
        assert(0 <= new_flow && new_flow <= new_cap);
        auto& _e = g[pos[i].first][pos[i].second];
        auto& _re = g[_e.to][_e.rev];
        _e.cap = new_cap - new_flow;
        _re.cap = new_flow;
    }

    Cap flow(int s, int t) {
        return flow(s, t, std::numeric_limits<Cap>::max());
    }
    Cap flow(int s, int t, Cap flow_limit) {
        assert(0 <= s && s < _n);
        assert(0 <= t && t < _n);
        assert(s != t);

        std::vector<int> level(_n), iter(_n);
        simple_queue<int> que;

        auto bfs = [&]() {
            std::fill(level.begin(), level.end(), -1);
            level[s] = 0;
            que.clear();
            que.push(s);
            while (!que.empty()) {
                int v = que.front();
                que.pop();
                for (auto e : g[v]) {
                    if (e.cap == 0 || level[e.to] >= 0) continue;
                    level[e.to] = level[v] + 1;
                    if (e.to == t) return;
                    que.push(e.to);
                }
            }
        };
        auto dfs = [&](auto self, int v, Cap up) {
            if (v == s) return up;
            Cap res = 0;
            int level_v = level[v];
            for (int& i = iter[v]; i < int(g[v].size()); i++) {
                _edge& e = g[v][i];
                if (level_v <= level[e.to] || g[e.to][e.rev].cap == 0) continue;
                Cap d =
                    self(self, e.to, std::min(up - res, g[e.to][e.rev].cap));
                if (d <= 0) continue;
                g[v][i].cap += d;
                g[e.to][e.rev].cap -= d;
                res += d;
                if (res == up) return res;
            }
            level[v] = _n;
            return res;
        };

        Cap flow = 0;
        while (flow < flow_limit) {
            bfs();
            if (level[t] == -1) break;
            std::fill(iter.begin(), iter.end(), 0);
            Cap f = dfs(dfs, t, flow_limit - flow);
            if (!f) break;
            flow += f;
        }
        return flow;
    }

    std::vector<bool> min_cut(int s) {
        std::vector<bool> visited(_n);
        simple_queue<int> que;
        que.push(s);
        while (!que.empty()) {
            int p = que.front();
            que.pop();
            visited[p] = true;
            for (auto e : g[p]) {
                if (e.cap && !visited[e.to]) {
                    visited[e.to] = true;
                    que.push(e.to);
                }
            }
        }
        return visited;
    }

  private:
    int _n;
    struct _edge {
        int to, rev;
        Cap cap;
    };
    std::vector<std::pair<int, int>> pos;
    std::vector<std::vector<_edge>> g;
};

int main() {
    int inf = 1001001001;
    int N, M, K;
    cin >> N >> M >> K;
    vector<pii> edge(M);
    rep(i, 0, M) {
        int a, b;
        cin >> a >> b;
        a--; b--;
        edge[i] = pii(a, b);
    }
    auto f = [&](int d) -> int {
        //d + 1個の頂点が必要だと思ったが、d個で十分だった。
        //int s = (d + 1) * N;
        int s = d * N;
        int t = s + 1;
        mf_graph<int> mf(t + 5);
        vvi data(N);
        rep(i, 0, N) {
            data[i].push_back(s);
            rep(j, 0, d) {
                data[i].push_back(i * d + j);
            }
            data[i].push_back(t);
        }
        //vv_cout(data);
        rep(i, 0, N) {
            if(1 <= i && i < N - 1)rep(j, 0, d + 1) mf.add_edge(data[i][j], data[i][j + 1], 0);
            rep(j, 0, d + 1) mf.add_edge(data[i][j + 1], data[i][j], inf);
        }
        mf.add_edge(data[0][0], data[0][1], 0);
        rep(i, 1, d + 1) mf.add_edge(data[0][i], data[0][i + 1], inf);
        rep(i, 0, d) mf.add_edge(data[N - 1][i], data[N - 1][i + 1], inf);
        mf.add_edge(data[N - 1][d], data[N - 1][d + 1], 0);
        for(auto [a, b] : edge) {
            rep(i, 1, d + 1) mf.add_edge(data[b][i], data[a][i], 1);
            rep(i, 2, d + 1) mf.add_edge(data[b][i], data[a][i - 1], inf);
        }
        int res = mf.flow(s, t);
        return res;
    };
    int ok = 0;
    int ng = N;
    while(abs(ok - ng) > 1) {
        int mid = (ok + ng) / 2;
        if(f(mid) <= K) ok = mid;
        else ng = mid;
    }
    
    //cout << f(1) << endl;
    cout << ok << endl;
}