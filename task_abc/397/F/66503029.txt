#include<bits/stdc++.h>
using namespace std;
const int N=3e5+5;
int n,ans,a[N],l[N],r[N],lst[N],tr[N<<2],dp[N],lazy[N<<2];
bool vis[N];
void push_down(int x){
	tr[x<<1]+=lazy[x];
	tr[x<<1|1]+=lazy[x];
	lazy[x<<1]+=lazy[x];
	lazy[x<<1|1]+=lazy[x];
	lazy[x]=0;
}
void modify(int l,int r,int x,int L,int R,int p){
	if(l!=r)push_down(x);
	if(l>=L&&r<=R){
		tr[x]+=p;
		lazy[x]+=p;
		return;
	}
	if(l>R||r<L)return;
	int mid((l+r)>>1);
	modify(l,mid,x<<1,L,R,p);
	modify(mid+1,r,x<<1|1,L,R,p);
	tr[x]=max(tr[x<<1],tr[x<<1|1]);
}
int query(int l,int r,int x,int L,int R){
	if(l!=r)push_down(x);
	if(l>=L&&r<=R)return tr[x];
	if(l>R||r<L)return 0;
	int mid((l+r)>>1);
	int a1=query(l,mid,x<<1,L,R),a2=query(mid+1,r,x<<1|1,L,R);
	tr[x]=max(tr[x<<1],tr[x<<1|1]);
	return max(a1,a2);
}
int main(){
	scanf("%d",&n);
	for(int i=1;i<=n;++i){
		scanf("%d",&a[i]);
		l[i]=l[i-1];
		if(!vis[a[i]]){
			vis[a[i]]=1;
			++l[i];
		}
	}
	memset(vis,0,sizeof(vis));
	for(int i=n;i>=1;--i){
		r[i]=r[i+1];
		if(!vis[a[i]]){
			vis[a[i]]=1;
			++r[i];
		}
	}
	for(int i=1;i<=n;++i){
		if(i>1)modify(1,n,1,max(1,lst[a[i]]),i-1,1);
		modify(1,n,1,i,i,l[i]);
		lst[a[i]]=i;
		if(i>1)dp[i]=query(1,n,1,1,i-1);
		if(i>1&&i<n)ans=max(ans,dp[i]+r[i+1]);
	}
	printf("%d",ans);
	return 0;
}