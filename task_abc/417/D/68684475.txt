#include <bits/stdc++.h>
using namespace std;

int main() {
  unsigned N;
  cin >> N;
  vector<array<unsigned, 3>> P(N);
  for (auto&& [p, a, b] : P)
    cin >> p >> a >> b;

  const auto M{ranges::max(P | views::transform([](const auto& p) { return p[0] + p[1]; }))};

  vector dp(N + 1, vector<unsigned>(M + 1));
  iota(begin(dp.back()), end(dp.back()), 0);

  for (unsigned i = N; i--;) {
    const auto& [p, a, b] = P[i];
    for (unsigned j = 0; j <= M; ++j)
      dp[i][j] = j <= p ? dp[i + 1][j + a] : dp[i + 1][j - min(j, b)];
  }

  vector<unsigned> sum_B(N);
  ranges::copy(P | views::elements<2>, begin(sum_B));
  inclusive_scan(begin(sum_B), end(sum_B), begin(sum_B), plus{});

  const auto access{[&dp, &sum_B, N, M](unsigned x) -> unsigned {
    if (x <= M) return dp[0][x];

    const auto need_down{ranges::lower_bound(sum_B, x - M)};
    if (need_down == end(sum_B)) return x - sum_B.back();
    return dp[need_down - begin(sum_B) + 1][x - min(x, *need_down)];
  }};

  unsigned Q;
  cin >> Q;
  for (unsigned i = 0; i < Q; ++i) {
    unsigned x;
    cin >> x;
    cout << access(x) << '\n';
  }
  cout << flush;
  return 0;
}
