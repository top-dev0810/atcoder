#include <bits/stdc++.h>

#define sz(x) (int)(x).size()
using namespace std;

template<class data_t, data_t _mod>
struct modular_fixed_base{
#define IS_INTEGRAL(T) (is_integral_v<T> || is_same_v<T, __int128_t> || is_same_v<T, __uint128_t>)
#define IS_UNSIGNED(T) (is_unsigned_v<T> || is_same_v<T, __uint128_t>)
	static_assert(IS_UNSIGNED(data_t));
	static_assert(1 <= _mod && _mod < data_t(1) << 8 * sizeof(data_t) - 1);
	static constexpr bool VARIATE_MOD_FLAG = false;
	static constexpr data_t mod(){
		return _mod;
	}
	template<class T>
	static constexpr vector<modular_fixed_base> precalc_power(T base, int SZ){
		vector<modular_fixed_base> res(SZ + 1, 1);
		for(auto i = 1; i <= SZ; ++ i) res[i] = res[i - 1] * base;
		return res;
	}
	template<class T>
	static constexpr vector<modular_fixed_base> precalc_geometric_sum(T base, int SZ){
		vector<modular_fixed_base> res(SZ + 1);
		for(auto i = 1; i <= SZ; ++ i) res[i] = res[i - 1] * base + base;
		return res;
	}
	static vector<modular_fixed_base> _INV;
	static constexpr void precalc_inverse(int SZ){
		if(_INV.empty()) _INV.assign(2, 1);
		for(auto x = _INV.size(); x <= SZ; ++ x) _INV.push_back(_mod / x * -_INV[_mod % x]);
	}
	// _mod must be a prime
	static modular_fixed_base _primitive_root;
	static constexpr modular_fixed_base primitive_root(){
		if(_primitive_root) return _primitive_root;
		if(_mod == 2) return _primitive_root = 1;
		if(_mod == 998244353) return _primitive_root = 3;
		data_t divs[20] = {};
		divs[0] = 2;
		int cnt = 1;
		data_t x = (_mod - 1) / 2;
		while(x % 2 == 0) x /= 2;
		for(auto i = 3; 1LL * i * i <= x; i += 2){
			if(x % i == 0){
				divs[cnt ++] = i;
				while(x % i == 0) x /= i;
			}
		}
		if(x > 1) divs[cnt ++] = x;
		for(auto g = 2; ; ++ g){
			bool ok = true;
			for(auto i = 0; i < cnt; ++ i){
				if(modular_fixed_base(g).power((_mod - 1) / divs[i]) == 1){
					ok = false;
					break;
				}
			}
			if(ok) return _primitive_root = g;
		}
	}
	constexpr modular_fixed_base(){ }
	constexpr modular_fixed_base(const double &x){ _data = _normalize(llround(x)); }
	constexpr modular_fixed_base(const long double &x){ _data = _normalize(llround(x)); }
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr> constexpr modular_fixed_base(const T &x){ _data = _normalize(x); }
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr> static constexpr data_t _normalize(const T &x){
		int sign = x >= 0 ? 1 : -1;
		data_t v =  _mod <= sign * x ? sign * x % _mod : sign * x;
		if(sign == -1 && v) v = _mod - v;
		return v;
	}
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr> constexpr operator T() const{ return data(); }
	constexpr modular_fixed_base &operator+=(const modular_fixed_base &otr){ if((_data += otr._data) >= _mod) _data -= _mod; return *this; }
	constexpr modular_fixed_base &operator-=(const modular_fixed_base &otr){ if((_data += _mod - otr._data) >= _mod) _data -= _mod; return *this; }
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr> constexpr modular_fixed_base &operator+=(const T &otr){ return *this += modular_fixed_base(otr); }
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr> constexpr modular_fixed_base &operator-=(const T &otr){ return *this -= modular_fixed_base(otr); }
	constexpr modular_fixed_base &operator++(){ return *this += 1; }
	constexpr modular_fixed_base &operator--(){ return *this += _mod - 1; }
	constexpr modular_fixed_base operator++(int){ modular_fixed_base result(*this); *this += 1; return result; }
	constexpr modular_fixed_base operator--(int){ modular_fixed_base result(*this); *this += _mod - 1; return result; }
	constexpr modular_fixed_base operator-() const{ return modular_fixed_base(_mod - _data); }
	constexpr modular_fixed_base &operator*=(const modular_fixed_base &rhs){
		if constexpr(is_same_v<data_t, unsigned int>) _data = (unsigned long long)_data * rhs._data % _mod;
		else if constexpr(is_same_v<data_t, unsigned long long>){
			long long res = _data * rhs._data - _mod * (unsigned long long)(1.L / _mod * _data * rhs._data);
			_data = res + _mod * (res < 0) - _mod * (res >= (long long)_mod);
		}
		else _data = _normalize(_data * rhs._data);
		return *this;
	}
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>
	constexpr modular_fixed_base &inplace_power(T e){
		if(e == 0) return *this = 1;
		if(_data == 0) return *this = {};
		if(_data == 1 || e == 1) return *this;
		if(_data == mod() - 1) return e % 2 ? *this : *this = -*this;
		if(e < 0) *this = 1 / *this, e = -e;
		if(e == 1) return *this;
		modular_fixed_base res = 1;
		for(; e; *this *= *this, e >>= 1) if(e & 1) res *= *this;
		return *this = res;
	}
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>
	constexpr modular_fixed_base power(T e) const{
		return modular_fixed_base(*this).inplace_power(e);
	}
	// c + c * x + ... + c * x^{e-1}
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>
	constexpr modular_fixed_base &inplace_geometric_sum(T e, modular_fixed_base c = 1){
		if(e == 0) return *this = {};
		if(_data == 0) return *this = {};
		if(_data == 1) return *this = c * e;
		if(e == 1) return *this = c;
		if(_data == mod() - 1) return *this = c * abs(e % 2);
		modular_fixed_base res = 0;
		if(e < 0) return *this = geometric_sum(-e + 1, -*this) - 1;
		if(e == 1) return *this = c * *this;
		for(; e; c *= 1 + *this, *this *= *this, e >>= 1) if(e & 1) res += c, c *= *this;
		return *this = res;
	}
	// c + c * x + ... + c * x^{e-1}
	template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>
	constexpr modular_fixed_base geometric_sum(T e, modular_fixed_base c = 1) const{
		return modular_fixed_base(*this).inplace_geometric_sum(e, c);
	}
	// Returns the minimum integer e>0 with b^e=*this, if it exists
	// O(sqrt(mod)) applications of hashmap
	constexpr optional<data_t> log(const modular_fixed_base &b) const{
		data_t m = mod(), n = sqrtl(m) + 1, j = 1;
		modular_fixed_base e = 1, f = 1;
		unordered_map<data_t, data_t> A;
		while(j <= n && (f = e *= b) != *this) A[(e * *this).data()] = j ++;
		if(e == *this) return j;
		if(gcd(mod(), e.data()) == gcd(mod(), data())) for(auto i = 2; i < n + 2; ++ i) if(A.count((e *= f).data())) return n * i - A[e.data()];
		return {};
	}
	constexpr optional<modular_fixed_base> inverse() const{
		make_signed_t<data_t> a = data(), m = _mod, u = 0, v = 1;
		if(data() < _INV.size()) return _INV[data()];
		while(a){
			make_signed_t<data_t> t = m / a;
			m -= t * a; swap(a, m);
			u -= t * v; swap(u, v);
		}
		if(m != 1) return {};
		return modular_fixed_base{u};
	}
	modular_fixed_base &operator/=(const modular_fixed_base &otr){
		auto inv_ptr = otr.inverse();
		assert(inv_ptr);
		return *this = *this * *inv_ptr;
	}
#define ARITHMETIC_OP(op, apply_op)\
constexpr modular_fixed_base operator op(const modular_fixed_base &x) const{ return modular_fixed_base(*this) apply_op x; }\
template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>\
constexpr modular_fixed_base operator op(const T &x) const{ return modular_fixed_base(*this) apply_op modular_fixed_base(x); }\
template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>\
constexpr friend modular_fixed_base operator op(const T &x, const modular_fixed_base &y){ return modular_fixed_base(x) apply_op y; }
	ARITHMETIC_OP(+, +=) ARITHMETIC_OP(-, -=) ARITHMETIC_OP(*, *=) ARITHMETIC_OP(/, /=)
#undef ARITHMETIC_OP
#define COMPARE_OP(op)\
constexpr bool operator op(const modular_fixed_base &x) const{ return _data op x._data; }\
template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>\
constexpr bool operator op(const T &x) const{ return _data op modular_fixed_base(x)._data; }\
template<class T, typename enable_if<IS_INTEGRAL(T)>::type* = nullptr>\
constexpr friend bool operator op(const T &x, const modular_fixed_base &y){ return modular_fixed_base(x)._data op y._data; }
	COMPARE_OP(==) COMPARE_OP(!=) COMPARE_OP(<) COMPARE_OP(<=) COMPARE_OP(>) COMPARE_OP(>=)
#undef COMPARE_OP
	friend istream &operator>>(istream &in, modular_fixed_base &number){
		long long x;
		in >> x;
		number._data = modular_fixed_base::_normalize(x);
		return in;
	}
	friend ostream &operator<<(ostream &out, const modular_fixed_base &number){
		out << number._data;
#ifdef LOCAL
		cerr << "(";
		for(auto d = 1; ; ++ d){
			if((number * d)._data <= 1000000){
				cerr << (number * d)._data;
				if(d != 1) cerr << "/" << d;
				break;
			}
			else if((-number * d)._data <= 1000000){
				cerr << "-" << (-number * d)._data;
				if(d != 1) cerr << "/" << d;
				break;
			}
		}
		cerr << ")";
#endif
		return out;
	}
	data_t _data = 0;
	constexpr data_t data() const{ return _data; }
#undef IS_INTEGRAL
#undef IS_UNSIGNED
};
template<class data_t, data_t _mod> vector<modular_fixed_base<data_t, _mod>> modular_fixed_base<data_t, _mod>::_INV;
template<class data_t, data_t _mod> modular_fixed_base<data_t, _mod> modular_fixed_base<data_t, _mod>::_primitive_root;

constexpr unsigned int mod = (119 << 23) + 1; // 998244353
// constexpr unsigned int mod = 1e9 + 7; // 1000000007
// constexpr unsigned int mod = 1e9 + 9; // 1000000009
// constexpr unsigned long long mod = (unsigned long long)1e18 + 9;
using modular = modular_fixed_base<decay_t<decltype(mod)>, mod>;

constexpr modular operator""_m(const char *x){
	modular res = 0;
	long long buffer = 0;
	long long buffer_width = 1;
	constexpr long long buffer_th = 1'000'000'000'000'000'000LL;
	while(*x){
		#ifdef LOCAL
		assert(isdigit(*x));
		#endif
		buffer = buffer * 10 + (*(x ++) - '0');
		if((buffer_width *= 10) == buffer_th){
			res = buffer_width * res + buffer;
			buffer = 0;
			buffer_width = 1;
		}
	}
	res = buffer_width * res + buffer;
	return res;
}

template<class T>
struct combinatorics{
#ifdef LOCAL
	#define ASSERT(c) assert(c)
#else
	#define ASSERT(c) 42
#endif
	// O(n)
	static vector<T> precalc_fact(int n){
		vector<T> f(n + 1, T{1});
		for(auto i = 1; i <= n; ++ i) f[i] = f[i - 1] * i;
		return f;
	}
	// O(n * m)
	static vector<vector<T>> precalc_C(int n, int m){
		vector<vector<T>> c(n + 1, vector<T>(m + 1));
		for(auto i = 0; i <= n; ++ i) for(auto j = 0; j <= min(i, m); ++ j) c[i][j] = i && j ? c[i - 1][j - 1] + c[i - 1][j] : T{1};
		return c;
	}
	int SZ = 0;
	vector<T> inv, fact, invfact;
	combinatorics(){ }
	// O(SZ)
	combinatorics(int SZ): SZ(SZ), inv(SZ + 1, T{1}), fact(SZ + 1, T{1}), invfact(SZ + 1, T{1}){
		for(auto i = 1; i <= SZ; ++ i) fact[i] = fact[i - 1] * i;
		invfact[SZ] = T{1} / fact[SZ];
		for(auto i = SZ - 1; i >= 0; -- i){
			invfact[i] = invfact[i + 1] * (i + 1);
			inv[i + 1] = invfact[i + 1] * fact[i];
		}
	}
	// O(1)
	T C(int n, int k) const{
		ASSERT(0 <= min(n, k) && max(n, k) <= SZ);
		return n >= k ? fact[n] * invfact[k] * invfact[n - k] : T{0};
	}
	// O(1)
	T P(int n, int k) const{
		ASSERT(0 <= min(n, k) && max(n, k) <= SZ);
		return n >= k ? fact[n] * invfact[n - k] : T{0};
	}
	// O(1)
	T H(int n, int k) const{
		ASSERT(0 <= min(n, k));
		if(n == 0) return T{0};
		return C(n + k - 1, k);
	}
	// Multinomial Coefficient
	T mC(int n, const vector<int> &a) const{
		ASSERT((int)a.size() >= 2 && accumulate(a.begin(), a.end(), 0) == n);
		ASSERT(0 <= min(n, *min_element(a.begin(), a.end())) && max(n, *max_element(a.begin(), a.end())) <= SZ);
		T res = fact[n];
		for(auto x: a) res *= invfact[x];
		return res;
	}
	// Multinomial Coefficient
	template<class... U, typename enable_if<(is_integral_v<U> && ...)>::type* = nullptr>
	T mC(int n, U... pack){
		ASSERT(sizeof...(pack) >= 2 && (... + pack) == n);
		return (fact[n] * ... * invfact[pack]);
	}
	// O(min(k, n - k))
	T naive_C(long long n, long long k) const{
		ASSERT(0 <= min(n, k));
		if(n < k) return 0;
		T res = T{1};
		k = min(k, n - k);
		ASSERT(k <= SZ);
		for(auto i = n; i > n - k; -- i) res *= i;
		return res * invfact[k];
	}
	// O(k)
	T naive_P(long long n, int k) const{
		ASSERT(0 <= min<long long>(n, k));
		if(n < k) return 0;
		T res = T{1};
		for(auto i = n; i > n - k; -- i) res *= i;
		return res;
	}
	// O(k)
	T naive_H(long long n, int k) const{
		ASSERT(0 <= min<long long>(n, k));
		return naive_C(n + k - 1, k);
	}
	// O(1)
	bool parity_C(long long n, long long k) const{
		ASSERT(0 <= min(n, k));
		return n >= k ? (n & k) == k : false;
	}
	// Number of ways to place n '('s and k ')'s starting with s copies of '(' such that in each prefix, number of '(' is equal or greater than ')'
	// Catalan(n, n, 0): n-th catalan number
	// Catalan(s, s+k-1, k-1): sum of products of k catalan numbers where the index of product sums up to s
	// O(1)
	T Catalan(int n, int k, int s = 0) const{
		ASSERT(0 <= min({n, k, s}));
		return k <= s ? C(n + k, k) : k <= n + s ? C(n + k, k) - C(n + k, k - s - 1) : T{0};
	}
	// Number of ways to place n '('s and k ')'s starting with s copies of '(' and ending with e copies of '(' such that in each prefix and suffix, number of '(' is equal or greater than ')'
	// O((n + k) / (n - k + s + e + 2))
	T bidirectional_Catalan(int n, int k, int s = 0, int e = 0) const{
		ASSERT(0 <= min({n, k, s, e}));
		if(n - k + s < 0 || n - k + e < 0) return T{0};
		if(n - k + s + e == 0) return T{n == 0 && k == 0};
		T res = C(n + k, n);
		for(auto l = -s - 1, m = n - k, r = n - k + e + 1, sign = -1; ; sign *= -1){
			m = 2 * l - m;
			if(n + k + m < 0) break;
			res += sign * C(n + k, n + k + m >> 1);
			tie(l, r) = pair<int, int>{2 * l - r, l};
		}
		for(auto l = -s - 1, m = n - k, r = n - k + e + 1, sign = -1; ; sign *= -1){
			m = 2 * r - m;
			if(n + k - m < 0) break;
			res += sign * C(n + k, n + k - m >> 1);
			tie(l, r) = pair<int, int>{r, 2 * r - l};
		}
		return res;
	}
	// Number of ways to place n of either '(' or ')' starting with s copies of '(' such that in each prefix, number of '(' is equal or greater than ')'
	// Up to s+1 C() calls
	T ballot_sequence_count(int n, int s = 0) const{
		ASSERT(0 <= min(n, s));
		T res = 0;
		for(auto k = max(0, min(n - s, (n + s + 1) / 2 - s)); k < min(n + 1, (n + s + 1) / 2 + 1); ++ k) res += C(n, k);
		return res;
	}
	// Number of ways to place n of either '(' or ')' starting with s copies of '(' and ending with e copies of '(' such that in each prefix and suffix, number of '(' is equal or greater than ')'
	// O(n * log(n))
	T bidirectional_ballot_sequence_count(int n, int s = 0, int e = 0) const{
		ASSERT(0 <= min({n, s, e}));
		T res = 0;
		for(auto k = 0; k <= n; ++ k) res += bidirectional_Catalan(k, n - k, s, e);
		return res;
	}
#undef ASSERT
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int A, B, C, D;
    cin >> A >> B >> C >> D;
    modular result = 0;
    combinatorics<modular> comb(A + B + C + D);
    // Iterate over last position of an orange.
    for (int i = B; i <= A + B + C; i++) {
        // First, place oranges before the last orange.
        // Based on this, the other fruits before the last orange 
        // get fixed (apples have to come before bananas).
        modular before = comb.C(i - 1, B - 1);
        // Then, the remaining apples have to be placed.
        // The other fruits can be placed arbitrarily after the 
        // last orange.
        int remA = 0;
        if (i < A + B) {
            remA = A - (i - B);
        }
        modular after = comb.C(A + B + C + D - (i + remA), D);
        result += before * after;
    }
    cout << result << "\n";

    return 0;
}
