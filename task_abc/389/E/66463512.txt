#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ull = unsigned long long;
using db = double;
using i128 = __int128;
using u128 = unsigned __int128;
#define I return
#define AK 0
#define XCPC ;
#define AL(X) (X).begin() + 1, (X).end()
#define ALL(X) (X).begin(), (X).end()
#define l first
#define r second
#define lson (u << 1)
#define rson (u << 1 | 1)
#define debug(x) cerr << #x << "=" << x
ll base1 = 141231;
ll base2 = 131;
ll inf = 1e18;
mt19937_64 rdm(chrono::system_clock::now().time_since_epoch().count()); // 随机数生成
db eps = 1e-9;
int n, m, k;
inline void solve()
{
    ll m;
    cin >> n >> m;
    vector<int> p(n + 1);
    for (int i = 1; i <= n; i++)
    {
        cin >> p[i];
    }
    ll ans = 0;
    auto check = [&](ll d)
    {
        i128 cnt = m;
        for (int i = 1; i <= n && cnt >= 0; i++)
        {
            i128 k = i128(d + p[i]) / (2ll * p[i]);
            cnt -= k * k * p[i];
        }
        return cnt >= 0;
    };
    ll l = 0, r = m;
    ll sum = 0;
    while (l <= r)
    {
        ll md = (l + r) / 2;
        if (check(md))
        {
            l = md + 1;
            sum = md;
        }
        else
        {
            r = md - 1;
        }
    }
    for (int i = 1; i <= n; i++)
    {
        ll k = (sum + p[i]) / (2ll * p[i]);
        ans += k;
        m -= k * k * p[i];
    }
    cout << ans + m / (sum + 1) << "\n";
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int tt = 1;
    // cin >> tt;
    while (tt--)
    {
        solve();
    }
    I AK XCPC
}