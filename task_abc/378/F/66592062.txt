#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define loop(i, a, b) for (ll i = a; i <= b; i++)

const ll M = 1e9 + 7;
const int N = 2e5+10;;
const ll INF = 1e18;

#define fast ios::sync_with_stdio(false); cin.tie(0);
ll dp[N];      //count of deg2 after consecutive deg3 from that vertex 
ll deg[N];
vector<ll>g[N];
ll ans=0;
void dfs(ll v,ll p)
{
  dp[v]=-1;
  for(auto u:g[v])
  {
    if(u==p)continue;
    dfs(u,v);
  }
  if(p==-1)
  {
    if(deg[v]==2)
    {
      if(dp[g[v][1]]>0)
      ans+=dp[g[v][1]];
      if(dp[g[v][0]]>0)
      ans+=dp[g[v][0]];
    }
    else if(deg[v]==3)
    {
      vector<ll>child=g[v];
      ll ans0=0,ans1=0,ans2=0;
      if(deg[child[0]]==2)ans0=1;
      if(deg[child[1]]==2)ans1=1;
      if(deg[child[2]]==2)ans2=1;
      if(deg[child[0]]==3)ans0=dp[child[0]];
      if(deg[child[1]]==3)ans1=dp[child[1]];
      if(deg[child[2]]==3)ans2=dp[child[2]];
      ans+=(ans0*ans1+ans1*ans2+ans2*ans0);
    }
    return;
  }
  if(deg[v]==2)
  {
    dp[v]=0;
    if(p==g[v][0])
    {
      if(dp[g[v][1]]>0)
      ans+=dp[g[v][1]];
    }
    else
    {
      if(dp[g[v][0]]>0)
      ans+=dp[g[v][0]];
    }
  }
  else if(deg[v]==3)
  {
    dp[v]=0;
    vector<ll>child=g[v];
    for(auto it=child.begin();it!=child.end();it++)
    {if(*it==p){child.erase(it);break;}}
    if(deg[child[0]]==2)
    dp[v]+=1;
    if(deg[child[1]]==2)
    dp[v]+=1;
    if(deg[child[0]]==3)
    dp[v]+=dp[child[0]];
    if(deg[child[1]]==3)
    dp[v]+=dp[child[1]];
    
    if(deg[child[0]]==2 && deg[child[1]]==2)
    ans+=1;
    else if(deg[child[0]]==2 && deg[child[1]]==3)
    ans+=dp[child[1]];
    else if(deg[child[0]]==3 && deg[child[1]]==2)
    ans+=dp[child[0]];
    else if(deg[child[0]]==3 && deg[child[1]]==3)
    ans+=dp[child[1]]*dp[child[0]];
  }
}
int main() {
    fast
    ll i,n,j,k;
    cin>>n;
    for(i=1;i<=n-1;i++)
    {
      ll u,v;
      cin>>u>>v;
      g[u].push_back(v);
      g[v].push_back(u);
      deg[v]++;
      deg[u]++;
    }
    dfs(1,-1);
    cout<<ans<<endl;
}
