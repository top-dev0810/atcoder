#include <bits/stdc++.h>
using namespace std;

#define rep(i, n) for (int i = 0; i < (n); i++)

// #define DEBUG

class UnionFind
{
public:
    vector<int> par;

    void init(int sz)
    {
        par.resize(sz, -1);
    }
    int root(int pos)
    {
        if (par[pos] == -1)
            return pos;
        par[pos] = root(par[pos]);
        return par[pos];
    }
    void unite(int u, int v)
    {
        u = root(u);
        v = root(v);
        if (u == v)
            return;
        par[u] = v;
    }
    bool same(int u, int v)
    {
        if (root(u) == root(v))
            return true;
        return false;
    }
};

int main()
{
#ifdef DEBUG
    freopen("input/in.txt", "r", stdin);
#endif

    int N, M;
    cin >> N >> M;

    vector<int> redundant;
    vector<int> A(M + 1), B(M + 1);

    UnionFind uf;
    uf.init(N + 1);

    for (int i = 1; i <= M; i++)
    {
        cin >> A[i] >> B[i];
        int s, l;
        s = min(A[i], B[i]);
        l = max(A[i], B[i]);

        if (s == l)
        {
            redundant.push_back(i);
            continue;
        }

        if (uf.same(s, l))
        {
            redundant.push_back(i);
            continue;
        }

        uf.unite(s, l);
    }

    vector<int> root;
    for (int i = 1; i <= N; i++)
    {
        if (i == uf.root(i))
        {
            root.push_back(i);
        }
    }

    cout << root.size() - 1 << endl;

    for (auto r : redundant)
    {
        if (root.size() == 1)
        {
            break;
        }

        int a = A[r];
        int rootA = uf.root(a);
        int other;

        for (int i = root.size() - 1; i >= 0; i--)
        {
            int rt = root[i];
            if (rootA != rt)
            {
                other = rt;
                break;
            }
        }

        auto it = lower_bound(
            root.begin(),
            root.end(),
            other);

        uf.unite(other, a);

        root.erase(it);
        cout << r << " " << a << " " << other << endl;
    }

    return 0;
}
