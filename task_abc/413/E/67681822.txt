#include <bits/stdc++.h>

using i64 = long long;
using u64 = unsigned long long;

void solve() {
  int n;
  std::cin >> n;

  std::vector<int> a(1 << n | 1);
  for (int i = 1; i <= (1 << n); ++i) {
    std::cin >> a[i];
  }

  auto work = [&](auto &&self, int l, int r) -> void {
    if (r - l + 1 == 1) {
      return;
    }
    int mid = (l + r) / 2;
    self(self, l, mid);
    self(self, mid + 1, r);
    auto lhs = std::vector<int>(a.begin() + l, a.begin() + mid + 1);
    auto rhs = std::vector<int>(a.begin() + mid + 1, a.begin() + r + 1);
    if (lhs > rhs) {
      std::swap(lhs, rhs);
    }
    std::copy(lhs.begin(), lhs.end(), a.begin() + l);
    std::copy(rhs.begin(), rhs.end(), a.begin() + mid + 1);
    // std::cerr << "work(" << l << ", " << r << ") = ";
    // for(int i = l; i <= r; ++i) {
    //   std::cerr << a[i] << " \n"[i == r];
    // }
  };
  work(work, 1, 1 << n);

  for(int i = 1; i <= (1 << n); ++i) {
    std::cout << a[i] << " \n"[i == (1 << n)];
  }
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);

  int t = 1;
  std::cin >> t;

  while (t--) {
    solve();
  }

  return 0;
}
// 729 -2430 8100 -27000 90000 -300000 1000000