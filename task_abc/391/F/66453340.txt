#include <bits/stdc++.h>
#define ll long long

using namespace std;

const int N = 2e5 + 50;

int n, m;
ll a[N], b[N], c[N];

struct node {
	int x, y, z;
	node() {}
	node(int X, int Y, int Z) {x = X, y = Y, z = Z;}
};

ll calc(node x) {return a[x.x] * b[x.y] + b[x.y] * c[x.z] + c[x.z] * a[x.x];}
bool operator < (const node &x, const node &y) {
	return calc(x) < calc(y);
}
priority_queue <node> q;
map <pair <int, pair <int, int>>, bool> mp;

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i++) scanf("%lld", &a[i]);
	for (int i = 1; i <= n; i++) scanf("%lld", &b[i]);
	for (int i = 1; i <= n; i++) scanf("%lld", &c[i]);
	sort(a + 1, a + n + 1, greater<int>());
	sort(b + 1, b + n + 1, greater<int>());
	sort(c + 1, c + n + 1, greater<int>());
	q.push(node(1, 1, 1));
	int cnt = 0;
	mp[{1, {1, 1}}] = 1;
	while (!q.empty()) {
		node x = q.top();
		q.pop();
		++cnt;
		if (cnt == m) {
			printf("%lld\n", calc(x));
			return 0;
		}
		if (x.x < n && !mp[{x.x + 1, {x.y, x.z}}]) q.push(node(x.x + 1, x.y, x.z)), mp[{x.x + 1, {x.y, x.z}}] = 1;
		if (x.y < n && !mp[{x.x, {x.y + 1, x.z}}]) q.push(node(x.x, x.y + 1, x.z)), mp[{x.x, {x.y + 1, x.z}}] = 1;
		if (x.z < n && !mp[{x.x, {x.y, x.z + 1}}]) q.push(node(x.x, x.y, x.z + 1)), mp[{x.x, {x.y, x.z + 1}}] = 1;
	}
	return 0;
}