#pragma GCC optimize(3, "Ofast", "inline")
#include <bits/stdc++.h>
#define db std::cout << "debug\n"
#define ll long long

int H, W;
int a[501][501], fa[500001], tot, vis[250001], w[500001], st[20][500001], dep[500001];
std::tuple<int, int, int> p[250001];
int X[4] = {1, -1, 0, 0};
int Y[4] = {0, 0, 1, -1};

int getid(int x, int y)
{
    return (x - 1) * W + y;
}
int find(int x)
{
    if (x == fa[x])
        return x;
    return fa[x] = find(fa[x]);
}

int LCA(int x, int y)
{
    if (dep[x] > dep[y])
        for (int i = 19; i >= 0; i--)
            if (dep[st[i][x]] >= dep[y])
                x = st[i][x];
    if (dep[x] < dep[y])
        for (int i = 19; i >= 0; i--)
            if (dep[st[i][y]] >= dep[x])
                y = st[i][y];
    if (x == y)
        return x;
    for (int i = 19; i >= 0; i--)
    {
        if (st[i][x] != st[i][y])
        {
            x = st[i][x];
            y = st[i][y];
        }
    }
    return st[0][x];
}

int Q, A, B, C, D, YY, Z;

inline void Fantasy_Blue()
{
    std::cin >> H >> W;
    for (int i = 1; i <= H; i++)
        for (int j = 1; j <= W; j++)
        {
            std::cin >> a[i][j];
            int id = getid(i, j);
            p[id] = {a[i][j], i, j};
            fa[id] = id;
            w[id] = a[i][j];
        }
    std::sort(p + 1, p + H * W + 1, std::greater<std::tuple<int, int, int>>());
    tot = H * W;
    for (int i = 1; i <= H * W; i++)
    {
        auto [val, x, y] = p[i];
        vis[getid(x, y)] = 1;
        for (int tt = 0; tt < 4; tt++)
        {
            int xx = x + X[tt], yy = y + Y[tt];
            if (xx < 1 || xx > H || yy < 1 || yy > W || !vis[getid(xx, yy)])
                continue;
            int f1 = find(getid(x, y)), f2 = find(getid(xx, yy));
            if (f1 == f2)
                continue;
            // std::cerr << f1 << ' ' << f2 << '\n';
            st[0][f1] = ++tot;
            st[0][f2] = tot;
            fa[f1] = fa[f2] = fa[tot] = tot;
            w[tot] = val;
        }
    }
    st[0][tot] = 0;
    for (int i = 1; i < 20; i++)
        for (int j = 1; j <= tot; j++)
            st[i][j] = st[i - 1][st[i - 1][j]];
    dep[tot] = 1;
    for (int i = tot - 1; i > 0; i--)
        dep[i] = dep[st[0][i]] + 1;
    std::cin >> Q;
    while (Q--)
    {
        std::cin >> A >> B >> YY >> C >> D >> Z;
        if (A == C && B == D)
        {
            std::cout << std::abs(YY - Z) << '\n';
            continue;
        }
        int lca = LCA(getid(A, B), getid(C, D));
        // std::cerr << getid(A, B) << " " << getid(C, D) << '\n';
        int minn = w[lca];
        if (minn >= YY || minn >= Z)
            std::cout << std::abs(YY - Z) << '\n';
        else
            std::cout << YY + Z - minn * 2 << '\n';
    }
}

int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);
    int t = 1;
    // std::cin >> t;
    while (t--)
    {
        Fantasy_Blue();
    }

    return 0;
}