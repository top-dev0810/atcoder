#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using i128 = __int128;
#define sz(x) (int)x.size()
#define all(v) v.begin(), v.end()
#define ps(y) cout << fixed << setprecision(y)
/*
 /\_/\              
( o.o )     /\_/\   
 > ^ <     ( o.o )    
            > ^ <   

 /\_/\      /\_/\  
( o.o )    ( o.o )  
 > ^ <      > ^ <       
*/
struct ST {
	const int n, k;
	vector<int> in1, in2;
	vector<vector<int>> Max, Min;
	ST(int n) : n(n), in1(n + 1), in2(n + 1), k(__lg(n)) {
		Max.resize(k + 1, vector<int>(n + 1));
		Min.resize(k + 1, vector<int>(n + 1));
	}
	void init() {
		for (int i = 1; i <= n; i++) {
			Max[0][i] = in1[i];
			Min[0][i] = in2[i];
		}
		for (int i = 0, t = 1; i < k; i++, t <<= 1) {
			const int T = n - (t << 1) + 1;
			for (int j = 1; j <= T; j++) {
				Max[i + 1][j] = max(Max[i][j], Max[i][j + t]);
				Min[i + 1][j] = min(Min[i][j], Min[i][j + t]);
			}
		}
	}
	int getMax(int l, int r) {
		if (l > r) {
			swap(l, r);
		}
		int k = __lg(r - l + 1);
		return max(Max[k][l], Max[k][r - (1 << k) + 1]);
	}
	int getMin(int l, int r) {
		if (l > r) {
			swap(l, r);
		}
		int k = __lg(r - l + 1);
		return min(Min[k][l], Min[k][r - (1 << k) + 1]);
	}
};
void solve()
{
	int n;
	cin>>n;

	vector<int>a(n+1),b(n+1);
	for(int i=1;i<=n;i++)
	{
		cin>>a[i];
	}
	int p=1;
	for(int i=1;i<=n;i++)
	{
		while(p<=n&&a[p]<a[i]*2)
			++p;
		if(p==n+1)
		{
			b[i]=1e9;
		}
		else
		{
			b[i]=p-i;
		}
	}
	ST sol(n);
	for(int i=1;i<=n;i++)
	{
		sol.in1[i]=b[i];
		sol.in2[i]=b[i];
	}
	sol.init();
	int q;
	cin>>q;
	while(q--)
	{
		int L,R;
		cin>>L>>R;
		int l=1,r=(R-L+1)/2,ans=0;
		auto check=[&](int k)->bool{
			return L+k-1+sol.getMax(L,L+k-1)<=R;
		};
		while(l<=r)
		{
			int mid=l+r>>1;
			if(check(mid))
			{
				ans=mid;
				l=mid+1;
			}
			else{
				r=mid-1;
			}
		}
		cout<<ans<<"\n";
	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	int T=1;
    //cin >> T;
	while (T--)
	{
		solve();
	}
	return 0;
}