#include <bits/stdc++.h>

using namespace std;
using i64 = long long;

int len, d[20];
i64 f[20][2][2][10][20];

i64 dfs(int pos, int pre, int lim, int t, int b) {
  if (pos > len) {
    return b >= 2;
  }
  if (~f[pos][pre][lim][t][b]) {
    return f[pos][pre][lim][t][b];
  }
  int nlim = lim ? d[pos] : 9;
  i64 p = 0;
  if (pre) {
    for (int i = 0; i <= nlim; i++) {
      p += dfs(pos + 1, i == 0, !(!lim || (i < nlim)), i, b + (i > 0));
    }
  } else {
    for (int i = 0; i <= nlim && i < t; i++) {
      p += dfs(pos + 1, 0, !(!lim || (i < nlim)), t, b + 1);
    }
  }
  return f[pos][pre][lim][t][b] = p;
}

i64 sol(i64 x) {
  if (x < 10) {
    return 0;
  }
	len = 0;
	do {
		d[++len] = x % 10;
		x /= 10;
	} while (x);
	for (int i = 1; i <= len>>1; i++) {
		swap(d[i], d[len-i+1]);
	}
  memset(f, -1, sizeof(f));
  return dfs(1, 1, 1, 0, 0);
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	i64 L, R;
	cin >> L >> R;
	cout << sol(R) - sol(L-1) << "\n";
	return 0;
}