#include<bits/stdc++.h>
using namespace std;
using ll = long long;

const int mod = 998244353;
const int maxn = 2030;

vector<int> vis(maxn, 0), p(maxn, 0), sz(maxn, 1), deg(maxn, 0);
vector<int> cycle[maxn], ch[maxn];

int n, m;
ll dp[maxn][maxn];

int find(int x) {
	if(p[x] == x) return x;
	else return p[x] = find(p[x]);
}

void unite(int u, int v) {
	u = find(u);
	v = find(v);
	if(u == v) return;
	sz[u] += sz[v];
	p[v] = u;
}

void dfs(int x) {
	for(int i = 1; i <= m; i++) {
		dp[x][i] = 1;
	}
	for(int y : ch[x]) {
		dfs(y);
		ll S = 0;
		for(int i = 1; i <= m; i++) {
			S += dp[y][i];
			S %= mod;
			dp[x][i] *= S;
			dp[x][i] %= mod;
		}
	}
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m;
	vector<int> a(n);
	for(int i = 0; i < n; i++) {
		cin >> a[i];
		a[i]--;
		deg[a[i]]++;
	}
	queue<int> leaf;
	for(int i = 0; i < n; i++) {
		if(deg[i] == 0) leaf.push(i);
	}
	while(!leaf.empty()) {
		int x = leaf.front();
		leaf.pop();
		deg[a[x]]--;
		if(deg[a[x]] == 0) leaf.push(a[x]);
	}
	for(int i = 0; i < n; i++) {
		p[i] = i;
		sz[i] = 1;
	}
	for(int i = 0; i < n; i++) {
		if(deg[i] > 0) unite(i, a[i]);
		else ch[a[i]].push_back(i);
	}
	
	for(int i = 0; i < n; i++) {
		if(deg[i] > 0) dfs(i);
	}
	ll ans = 1;
	for(int i = 0; i < n; i++) {
		if(deg[i] > 0 && p[i] == i) {
			int x = i;
			while(!vis[x]) {
				vis[x] = 1;
				cycle[i].push_back(x);
				x = a[x];
			}
			ll S = 0;
			for(int j = 1; j <= m; j++) {
				ll A = 1;
				for(int y : cycle[i]) {
					A *= dp[y][j];
					A %= mod;	
				}
				S += A;
				S %= mod;
			}
			ans *= S;
			ans %= mod;
		}
	}
	cout << ans << '\n';
	return 0;
}