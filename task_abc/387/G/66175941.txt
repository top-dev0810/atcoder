#include<bits/stdc++.h>
using namespace std;

using poly=vector<long long>;
const int mo=998244353,g=3,ig=332748118,inv2=499122177,OPT_SIZE=64;
inline long long ksm(long long x,long long y){if (mo==1) return 0; long long ans=1;for (int i=0;(y>>i);++i){if (y>>i&1) ans=ans*x%mo; x=x*x%mo;}return ans;}
inline long long invv(long long x){return ksm(x,mo-2);}
inline void NTT(poly &a,int n,int flag){static vector<int> rev={0};static int S=0;while ((1<<S)<n){rev.resize(2<<S); for (int i=0;i<(1<<S);++i) rev[i]<<=1,rev[i|(1<<S)]=rev[i]|1;++S;}int L=S-__lg(n);for (int i=0;i<n;++i) if (i<(rev[i]>>L)) swap(a[i],a[rev[i]>>L]);if (flag==-1) flag=0;vector<unsigned long long> f(a.begin(),a.end());for (int mid=1;mid<n;mid<<=1){int w1=ksm((flag?g:ig),(mo-1)/(mid<<1));vector<int> w(mid); w[0]=1;for (int i=1;i<mid;++i) w[i]=(long long)w[i-1]*w1%mo;for (int i=0;i<n;i+=mid<<1) for (int j=0;j<mid;++j){int t=(long long)w[j]*f[i+mid+j]%mo;f[i+mid+j]=f[i+j]-t+mo;f[i+j]+=t;}if (mid==1<<10) for (int i=0;i<n;++i) f[i]%=mo;}int inv=flag?1:ksm(n,mo-2);for (int i=0;i<n;++i) a[i]=f[i]%mo*inv%mo;}
poly operator +(poly A,poly B){if (B.size()>A.size()) A.resize(B.size()); for (int i=0;i<(int)B.size();++i) A[i]+=B[i],A[i]=(A[i]>=mo?A[i]-mo:A[i]); return A;}
poly operator -(poly A,poly B){if (B.size()>A.size()) A.resize(B.size()); for (int i=0;i<(int)B.size();++i) A[i]-=B[i],A[i]=(A[i]<0?A[i]+mo:A[i]); return A;}
poly operator *(poly A,poly B){if (min(A.size(),B.size())<=OPT_SIZE){if (A.size()<B.size()) swap(A,B);A.resize(A.size()+B.size()-1);for (int i=(int)A.size()-1;i>=0;--i){A[i]*=B[0];for (int j=1;j<=min(i,(int)B.size()-1);++j){A[i]+=A[i-j]*B[j]; if ((j&7)==7) A[i]%=mo;}}for (auto &i:A) i%=mo;return A;}int na=A.size()+B.size(),len=1;while (len<na) len<<=1;A.resize(len),B.resize(len);NTT(A,len,1),NTT(B,len,1);for (int i=0;i<len;++i) A[i]=A[i]*B[i]%mo;NTT(A,len,-1);if ((int)A.size()>na-1) A.resize(na-1);return A;}
poly operator *(long long A,poly B){if (A<0 || A>=mo){A%=mo; if (A<0) A+=mo;} for (auto &i:B) i=i*A%mo; return B;}
poly operator *(poly B,long long A){if (A<0 || A>=mo){A%=mo; if (A<0) A+=mo;} for (auto &i:B) i=i*A%mo; return B;}
inline poly INV(poly A){int pres=A.size();poly ans={ksm(A[0],mo-2)};for (int s=2;s<(int)A.size()*2;s<<=1){poly now(2*s);ans.resize(2*s); poly tmp=ans;NTT(tmp,2*s,1);for (int i=0;i<2*s;++i) now[i]=(i<min(s,(int)A.size())?A[i]:0);NTT(now,2*s,1);for (int i=0;i<2*s;++i) ans[i]=tmp[i]*now[i]%mo;NTT(ans,2*s,-1);for (long long &i:ans) i=(i?mo-i:0); ans[0]=(ans[0]+2)%mo;for (int i=s;i<2*s;++i) ans[i]=0;NTT(ans,2*s,1);for (int i=0;i<2*s;++i) ans[i]=tmp[i]*ans[i]%mo;NTT(ans,2*s,-1);for (int i=s;i<2*s;++i) ans[i]=0;}ans.resize(pres);return ans;}
inline poly SQRT(poly A){int len=1; while (len<(int)A.size()) len<<=1;int pres=A.size(); A.resize(len);poly ans={(long long)sqrtl(A[0])},now={A[0]};for (int s=2;s<=len;s<<=1){ans.resize(s); poly tmp=INV(ans); tmp.resize(s),now.resize(s); for (int i=(s>>1);i<s;++i) now[i]=A[i];ans=ans+tmp*now;for (long long &i:ans) i=i*inv2%mo;}ans.resize(pres);return ans;}
inline poly DR(poly A){for (int i=1;i<(int)A.size();++i) A[i-1]=A[i]*i%mo; A[(int)A.size()-1]=0; return A;}
inline poly IN(poly A,int c=0){vector<int> iv(A.size()+1); iv[1]=1; for (long long i=2;i<=(int)A.size();++i) iv[i]=mo-(mo/i*iv[mo%i]%mo)%mo; A.emplace_back(0); for (int i=(int)(A.size())-2;i>=0;--i) A[i+1]=iv[i+1]*A[i]%mo; A[0]=c; return A;}
inline poly ln(poly A){int pres=A.size(); A=IN(DR(A)*INV(A)); A.resize(pres); return A;}
inline poly exp(poly A){int n=1; while (n<(int)A.size()) n<<=1;poly T(n<<1),F(n);for (int i=0;i<(int)A.size();++i) A[i]=A[i]*i%mo;A.resize(n);for (int s=2;s<=n;s<<=1){poly TMP(s);for (int i=0;i<s;++i) TMP[i]=A[i];NTT(TMP,s,1);for (int i=0;i<s;++i) T[s+i]=TMP[i];}F[0]=1;for (int i=1;i<n;++i){int l=(i&-i);if (l==1 && i>1) F[i-1]=F[i-1]*ksm(i-1,mo-2)%mo;poly P(l);for (int j=0;j<l;++j) P[j]=F[i-l+j];if (l<=OPT_SIZE){poly Q(l<<1); for (int i=0;i<(l<<1);++i) Q[i]=A[i]; P=P*Q;}else{P.resize(l<<1);NTT(P,l<<1,1);for (int j=0;j<(l<<1);++j) P[j]=P[j]*T[(l<<1)+j]%mo;NTT(P,l<<1,-1);}for (int j=0;j<l;++j) F[i+j]=(F[i+j]+P[l+j])%mo;if (l==1) F[i]=F[i]*ksm(i,mo-2)%mo;}return F;}
inline poly ksm(poly A,long long x){if (x==0){for (int i=1;i<(int)A.size();++i) A[i]=0; A[0]=1; return A;}int preLen=A.size();int cnt=0;while (cnt<preLen && A[cnt]==0) ++cnt;if ((__int128)cnt*x>=preLen){for (int i=0;i<(int)A.size();++i) A[i]=0; return A;}if (cnt){for (int i=0;i<preLen-cnt;++i) A[i]=A[i+cnt]; for (int i=preLen-cnt;i<preLen;++i) A[i]=0;}long long a0=A[0],iv=ksm(a0,mo-2);for (long long &i:A) i=i*iv%mo;A=ln(A); A.resize(preLen);for (long long &i:A) i=i*(x%mo)%mo;A=exp(A);long long ma=ksm(a0,x);for (long long &i:A) i=i*ma%mo;if (cnt){for (int i=preLen-1;i>=cnt*x;--i) A[i]=A[i-cnt*x]; for (int i=0;i<cnt*x;++i) A[i]=0;}return A;}

int n;
bitset<300001> notPrime;

signed main(){
	ios::sync_with_stdio(false),cin.tie(0);
	
	cin>>n;
	poly A(n+1);
	if (n>1) A[1]=n;
	for (int i=2;i<=n;++i) if (!notPrime[i])
		for (int j=i+i;j<=n;j+=i) notPrime[j]=1;
	notPrime[2]=1;
	for (int i=3;i<n;++i) if (!notPrime[i])
		A[i]=1ll*n*inv2%mo;
		
	A=exp(A);
	int ans=(A[n]*invv(1ll*n*n%mo)+(n==1?1:(!notPrime[n]?inv2*invv(n)%mo:0)))%mo;
	for (int i=1;i<=n;++i) ans=1ll*ans*i%mo;
	cout<<ans<<'\n';

	return 0;
}