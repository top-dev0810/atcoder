#include<bits/stdc++.h>
using i64 = long long;
using f64 = long double;
const f64 inf = 1e18;
const f64 esp = 1e-6;
int main(){
    std::ios::sync_with_stdio(0);
    std::cin.tie(nullptr);

    int N;
    std::cin >> N;
    std::vector<f64> X(N) , H(N) , t(N) , inv(N); 
    for(int i = 0; i < N; i++){
        std::cin >> X[i] >> H[i];
        t[i] = H[i] / X[i];
        inv[i] = 1.0 / X[i];
    }

    auto check = [&] (f64 b){
        f64 mx = -inf;
        for(int i = 0; i < N; i++){
            f64 w = t[i] - inv[i] * b;
            //std::cout << std::fixed << std::setprecision(12) << w << '\n';
            if(w < mx) return false;
            mx = w;
        } 
        return true;
    };

    //std::cout << check(1.5) << '\n';

    f64 l = -inf , r = inf , ans = -1;
    while(r - l > 1){
        f64 mid = (r + l) / 2.0;
        if(check(mid)){
            ans = mid;
            r = mid;
        }else{
            l = mid;
        }
    }

    for(int i = 0; i < 40; i++){
        f64 mid = (r + l) / 2.0;
        if(check(mid)){
            ans = mid;
            r = mid;
        }else{
            l = mid;
        }
    }

    if(ans < 0.0){
        std::cout << -1 << '\n';
    }else{
        std::cout << std::fixed << std::setprecision(12) << ans << '\n';
    }

    return 0;
}