#include <bits/stdc++.h>

#define x first
#define y second

using namespace std;

typedef long long ll;
typedef pair<ll, ll> PLL;
typedef unsigned long long ull;

mt19937_64 rng(time(0));

void chmax(ll &x, ll y){if (x < y) x = y;}
void chmin(ll &x, ll y){if (x > y) x = y;}

/*
0 1
1 1
*/

const ll N = 2e5 + 10, P = 998244353;

vector<vector<ll>> operator * (vector<vector<ll>> a, vector<vector<ll>> b)
{
    vector c(2, vector<ll>(2));
    for (ll i = 0; i <= 1; i ++ )
        for (ll j = 0; j <= 1; j ++ )
            for (ll k = 0; k <= 1; k ++ )
                c[i][j] = (c[i][j] + a[i][k] * b[k][j]) % P;
    return c;
}

vector<vector<ll>> qmi(vector<vector<ll>> a, ll b)
{
    vector<vector<ll>> res(2, vector<ll>(2));
    res[0][0] = res[1][1] = 1;
    while (b)
    {
        if (b & 1) res = res * a;
        a = a * a;
        b >>= 1;
    }
    return res;
}

ll fact[N], infact[N];
ll qmi(ll a, ll b)
{
    ll res = 1;
    while (b)
    {
        if (b & 1) res = res * a % P;
        a = a * a % P;
        b >>= 1;
    }
    return res;
}

void init()
{
    fact[0] = infact[0] = 1;
    for (ll i = 1; i < N; i ++ ) fact[i] = fact[i - 1] * i % P;
    infact[N - 1] = qmi(fact[N - 1], P - 2);
    for (ll i = N - 2; i >= 1; i -- ) infact[i] = infact[i + 1] * (i + 1) % P;
}

ll C(ll n, ll m)
{
    if (m < 0 || m > n) return 0;
    return fact[n] * infact[m] % P * infact[n - m] % P;
}

struct Node
{
    ll l, r;
    vector<vector<ll>> g;
}tr[N << 2];

void push_up(ll u)
{
    tr[u].g = tr[u << 1].g * tr[u << 1 | 1].g;
}

void build(ll u, ll l, ll r)
{
    tr[u] = {l, r, {{1, 0}, {0, 1}}};
    if (l == r) return ;
    ll mid = l + r >> 1;
    build(u << 1, l, mid), build(u << 1 | 1, mid + 1, r);
}

void modify(ll u, ll p, vector<vector<ll>> g)
{
    if (tr[u].l == tr[u].r) return tr[u].g = g, void();
    ll mid = tr[u].l + tr[u].r >> 1;
    if (mid >= p) modify(u << 1, p, g);
    else modify(u << 1 | 1, p, g);
    push_up(u);
}

vector<vector<ll>> get(ll n, ll c0)
{
    vector<vector<ll>> g(2, vector<ll>(2));
    g[0][0] = C(c0 - 1 + n - 2 * c0, c0 - 1);
    g[0][1] = C(c0 + n - 2 * c0 - 1, c0);
    g[1][0] = C(c0 - 1 + n - 2 * c0 + 1, c0 - 1);
    g[1][1] = C(c0 + n - 2 * c0, c0);
    return g;
}

void solve()
{
    init();

    ll n, q;
    cin >> n >> q;
    build(1, 1, n);

    vector<ll> a(n + 1, -1);
    a[0] = 0;

    set<ll> st;
    st.insert(0), st.insert(n + 1);
    while (q -- )
    {
        ll x, y;
        cin >> x >> y;

        if (st.count(x) && y == -1)
        {
            auto it = st.lower_bound(x);
            modify(1, x, {{1, 0}, {0, 1}});
            it ++;
            if (*it != n + 1)
            {
                ll r = *it;
                it --, it --;
                ll l = *it;
                modify(1, r, get(r - l, a[r] - a[l]));
            }
            a[x] = -1;
            st.erase(x);
        }
        else if (y != -1)
        {
            st.insert(x);
            a[x] = y;
            auto it = st.lower_bound(x);

            it --;
            ll l = *it;
            modify(1, x, get(x - l, a[x] - a[l]));
            
            it ++, it ++;
            if (*it != n + 1)
            {
                ll r = *it;
                modify(1, r, get(r - x, a[r] - a[x]));
            }
        }

        vector<vector<ll>> res;
        res = {{0, 1}, {0, 0}};
        res = res * tr[1].g;
        res = res * qmi({{0, 1}, {1, 1}}, n - (*--st.lower_bound(n + 1)));
        cout << (res[0][0] + res[0][1]) % P << '\n';
    }
}

int main()
{ 
    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);

    ll _ = 1;
    //cin >> _;

    while (_ -- )
    solve();

    return 0;
}
